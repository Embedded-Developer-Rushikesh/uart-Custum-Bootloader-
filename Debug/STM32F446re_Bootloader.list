
STM32F446re_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  080081d0  080081d0  000081d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800bdd4  0800bdd4  0000bdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c19c  0800c19c  00010064  2**0
                  CONTENTS
  4 .ARM          00000008  0800c19c  0800c19c  0000c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a4  0800c1a4  00010064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a4  0800c1a4  0000c1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1a8  0800c1a8  0000c1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800c1ac  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000064  0800c210  00010064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  0800c210  00010350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f66  00000000  00000000  000100d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f58  00000000  00000000  0001a03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0001bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f0  00000000  00000000  0001c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002190b  00000000  00000000  0001cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc37  00000000  00000000  0003e8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9443  00000000  00000000  0004b4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028f8  00000000  00000000  00114938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00117230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	; (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	; (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000064 	.word	0x20000064
 80081ec:	00000000 	.word	0x00000000
 80081f0:	0800bdbc 	.word	0x0800bdbc

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	; (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	; (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	; (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000068 	.word	0x20000068
 800820c:	0800bdbc 	.word	0x0800bdbc

08008210 <strlen>:
 8008210:	4603      	mov	r3, r0
 8008212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008216:	2a00      	cmp	r2, #0
 8008218:	d1fb      	bne.n	8008212 <strlen+0x2>
 800821a:	1a18      	subs	r0, r3, r0
 800821c:	3801      	subs	r0, #1
 800821e:	4770      	bx	lr

08008220 <memchr>:
 8008220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008224:	2a10      	cmp	r2, #16
 8008226:	db2b      	blt.n	8008280 <memchr+0x60>
 8008228:	f010 0f07 	tst.w	r0, #7
 800822c:	d008      	beq.n	8008240 <memchr+0x20>
 800822e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008232:	3a01      	subs	r2, #1
 8008234:	428b      	cmp	r3, r1
 8008236:	d02d      	beq.n	8008294 <memchr+0x74>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	b342      	cbz	r2, 8008290 <memchr+0x70>
 800823e:	d1f6      	bne.n	800822e <memchr+0xe>
 8008240:	b4f0      	push	{r4, r5, r6, r7}
 8008242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800824a:	f022 0407 	bic.w	r4, r2, #7
 800824e:	f07f 0700 	mvns.w	r7, #0
 8008252:	2300      	movs	r3, #0
 8008254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008258:	3c08      	subs	r4, #8
 800825a:	ea85 0501 	eor.w	r5, r5, r1
 800825e:	ea86 0601 	eor.w	r6, r6, r1
 8008262:	fa85 f547 	uadd8	r5, r5, r7
 8008266:	faa3 f587 	sel	r5, r3, r7
 800826a:	fa86 f647 	uadd8	r6, r6, r7
 800826e:	faa5 f687 	sel	r6, r5, r7
 8008272:	b98e      	cbnz	r6, 8008298 <memchr+0x78>
 8008274:	d1ee      	bne.n	8008254 <memchr+0x34>
 8008276:	bcf0      	pop	{r4, r5, r6, r7}
 8008278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800827c:	f002 0207 	and.w	r2, r2, #7
 8008280:	b132      	cbz	r2, 8008290 <memchr+0x70>
 8008282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008286:	3a01      	subs	r2, #1
 8008288:	ea83 0301 	eor.w	r3, r3, r1
 800828c:	b113      	cbz	r3, 8008294 <memchr+0x74>
 800828e:	d1f8      	bne.n	8008282 <memchr+0x62>
 8008290:	2000      	movs	r0, #0
 8008292:	4770      	bx	lr
 8008294:	3801      	subs	r0, #1
 8008296:	4770      	bx	lr
 8008298:	2d00      	cmp	r5, #0
 800829a:	bf06      	itte	eq
 800829c:	4635      	moveq	r5, r6
 800829e:	3803      	subeq	r0, #3
 80082a0:	3807      	subne	r0, #7
 80082a2:	f015 0f01 	tst.w	r5, #1
 80082a6:	d107      	bne.n	80082b8 <memchr+0x98>
 80082a8:	3001      	adds	r0, #1
 80082aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80082ae:	bf02      	ittt	eq
 80082b0:	3001      	addeq	r0, #1
 80082b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80082b6:	3001      	addeq	r0, #1
 80082b8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ba:	3801      	subs	r0, #1
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop

080082c0 <__aeabi_uldivmod>:
 80082c0:	b953      	cbnz	r3, 80082d8 <__aeabi_uldivmod+0x18>
 80082c2:	b94a      	cbnz	r2, 80082d8 <__aeabi_uldivmod+0x18>
 80082c4:	2900      	cmp	r1, #0
 80082c6:	bf08      	it	eq
 80082c8:	2800      	cmpeq	r0, #0
 80082ca:	bf1c      	itt	ne
 80082cc:	f04f 31ff 	movne.w	r1, #4294967295
 80082d0:	f04f 30ff 	movne.w	r0, #4294967295
 80082d4:	f000 b970 	b.w	80085b8 <__aeabi_idiv0>
 80082d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082e0:	f000 f806 	bl	80082f0 <__udivmoddi4>
 80082e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ec:	b004      	add	sp, #16
 80082ee:	4770      	bx	lr

080082f0 <__udivmoddi4>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	9e08      	ldr	r6, [sp, #32]
 80082f6:	460d      	mov	r5, r1
 80082f8:	4604      	mov	r4, r0
 80082fa:	460f      	mov	r7, r1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d14a      	bne.n	8008396 <__udivmoddi4+0xa6>
 8008300:	428a      	cmp	r2, r1
 8008302:	4694      	mov	ip, r2
 8008304:	d965      	bls.n	80083d2 <__udivmoddi4+0xe2>
 8008306:	fab2 f382 	clz	r3, r2
 800830a:	b143      	cbz	r3, 800831e <__udivmoddi4+0x2e>
 800830c:	fa02 fc03 	lsl.w	ip, r2, r3
 8008310:	f1c3 0220 	rsb	r2, r3, #32
 8008314:	409f      	lsls	r7, r3
 8008316:	fa20 f202 	lsr.w	r2, r0, r2
 800831a:	4317      	orrs	r7, r2
 800831c:	409c      	lsls	r4, r3
 800831e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008322:	fa1f f58c 	uxth.w	r5, ip
 8008326:	fbb7 f1fe 	udiv	r1, r7, lr
 800832a:	0c22      	lsrs	r2, r4, #16
 800832c:	fb0e 7711 	mls	r7, lr, r1, r7
 8008330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008334:	fb01 f005 	mul.w	r0, r1, r5
 8008338:	4290      	cmp	r0, r2
 800833a:	d90a      	bls.n	8008352 <__udivmoddi4+0x62>
 800833c:	eb1c 0202 	adds.w	r2, ip, r2
 8008340:	f101 37ff 	add.w	r7, r1, #4294967295
 8008344:	f080 811c 	bcs.w	8008580 <__udivmoddi4+0x290>
 8008348:	4290      	cmp	r0, r2
 800834a:	f240 8119 	bls.w	8008580 <__udivmoddi4+0x290>
 800834e:	3902      	subs	r1, #2
 8008350:	4462      	add	r2, ip
 8008352:	1a12      	subs	r2, r2, r0
 8008354:	b2a4      	uxth	r4, r4
 8008356:	fbb2 f0fe 	udiv	r0, r2, lr
 800835a:	fb0e 2210 	mls	r2, lr, r0, r2
 800835e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008362:	fb00 f505 	mul.w	r5, r0, r5
 8008366:	42a5      	cmp	r5, r4
 8008368:	d90a      	bls.n	8008380 <__udivmoddi4+0x90>
 800836a:	eb1c 0404 	adds.w	r4, ip, r4
 800836e:	f100 32ff 	add.w	r2, r0, #4294967295
 8008372:	f080 8107 	bcs.w	8008584 <__udivmoddi4+0x294>
 8008376:	42a5      	cmp	r5, r4
 8008378:	f240 8104 	bls.w	8008584 <__udivmoddi4+0x294>
 800837c:	4464      	add	r4, ip
 800837e:	3802      	subs	r0, #2
 8008380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008384:	1b64      	subs	r4, r4, r5
 8008386:	2100      	movs	r1, #0
 8008388:	b11e      	cbz	r6, 8008392 <__udivmoddi4+0xa2>
 800838a:	40dc      	lsrs	r4, r3
 800838c:	2300      	movs	r3, #0
 800838e:	e9c6 4300 	strd	r4, r3, [r6]
 8008392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008396:	428b      	cmp	r3, r1
 8008398:	d908      	bls.n	80083ac <__udivmoddi4+0xbc>
 800839a:	2e00      	cmp	r6, #0
 800839c:	f000 80ed 	beq.w	800857a <__udivmoddi4+0x28a>
 80083a0:	2100      	movs	r1, #0
 80083a2:	e9c6 0500 	strd	r0, r5, [r6]
 80083a6:	4608      	mov	r0, r1
 80083a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ac:	fab3 f183 	clz	r1, r3
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d149      	bne.n	8008448 <__udivmoddi4+0x158>
 80083b4:	42ab      	cmp	r3, r5
 80083b6:	d302      	bcc.n	80083be <__udivmoddi4+0xce>
 80083b8:	4282      	cmp	r2, r0
 80083ba:	f200 80f8 	bhi.w	80085ae <__udivmoddi4+0x2be>
 80083be:	1a84      	subs	r4, r0, r2
 80083c0:	eb65 0203 	sbc.w	r2, r5, r3
 80083c4:	2001      	movs	r0, #1
 80083c6:	4617      	mov	r7, r2
 80083c8:	2e00      	cmp	r6, #0
 80083ca:	d0e2      	beq.n	8008392 <__udivmoddi4+0xa2>
 80083cc:	e9c6 4700 	strd	r4, r7, [r6]
 80083d0:	e7df      	b.n	8008392 <__udivmoddi4+0xa2>
 80083d2:	b902      	cbnz	r2, 80083d6 <__udivmoddi4+0xe6>
 80083d4:	deff      	udf	#255	; 0xff
 80083d6:	fab2 f382 	clz	r3, r2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f040 8090 	bne.w	8008500 <__udivmoddi4+0x210>
 80083e0:	1a8a      	subs	r2, r1, r2
 80083e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083e6:	fa1f fe8c 	uxth.w	lr, ip
 80083ea:	2101      	movs	r1, #1
 80083ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80083f0:	fb07 2015 	mls	r0, r7, r5, r2
 80083f4:	0c22      	lsrs	r2, r4, #16
 80083f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80083fa:	fb0e f005 	mul.w	r0, lr, r5
 80083fe:	4290      	cmp	r0, r2
 8008400:	d908      	bls.n	8008414 <__udivmoddi4+0x124>
 8008402:	eb1c 0202 	adds.w	r2, ip, r2
 8008406:	f105 38ff 	add.w	r8, r5, #4294967295
 800840a:	d202      	bcs.n	8008412 <__udivmoddi4+0x122>
 800840c:	4290      	cmp	r0, r2
 800840e:	f200 80cb 	bhi.w	80085a8 <__udivmoddi4+0x2b8>
 8008412:	4645      	mov	r5, r8
 8008414:	1a12      	subs	r2, r2, r0
 8008416:	b2a4      	uxth	r4, r4
 8008418:	fbb2 f0f7 	udiv	r0, r2, r7
 800841c:	fb07 2210 	mls	r2, r7, r0, r2
 8008420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008424:	fb0e fe00 	mul.w	lr, lr, r0
 8008428:	45a6      	cmp	lr, r4
 800842a:	d908      	bls.n	800843e <__udivmoddi4+0x14e>
 800842c:	eb1c 0404 	adds.w	r4, ip, r4
 8008430:	f100 32ff 	add.w	r2, r0, #4294967295
 8008434:	d202      	bcs.n	800843c <__udivmoddi4+0x14c>
 8008436:	45a6      	cmp	lr, r4
 8008438:	f200 80bb 	bhi.w	80085b2 <__udivmoddi4+0x2c2>
 800843c:	4610      	mov	r0, r2
 800843e:	eba4 040e 	sub.w	r4, r4, lr
 8008442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8008446:	e79f      	b.n	8008388 <__udivmoddi4+0x98>
 8008448:	f1c1 0720 	rsb	r7, r1, #32
 800844c:	408b      	lsls	r3, r1
 800844e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008452:	ea4c 0c03 	orr.w	ip, ip, r3
 8008456:	fa05 f401 	lsl.w	r4, r5, r1
 800845a:	fa20 f307 	lsr.w	r3, r0, r7
 800845e:	40fd      	lsrs	r5, r7
 8008460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008464:	4323      	orrs	r3, r4
 8008466:	fbb5 f8f9 	udiv	r8, r5, r9
 800846a:	fa1f fe8c 	uxth.w	lr, ip
 800846e:	fb09 5518 	mls	r5, r9, r8, r5
 8008472:	0c1c      	lsrs	r4, r3, #16
 8008474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008478:	fb08 f50e 	mul.w	r5, r8, lr
 800847c:	42a5      	cmp	r5, r4
 800847e:	fa02 f201 	lsl.w	r2, r2, r1
 8008482:	fa00 f001 	lsl.w	r0, r0, r1
 8008486:	d90b      	bls.n	80084a0 <__udivmoddi4+0x1b0>
 8008488:	eb1c 0404 	adds.w	r4, ip, r4
 800848c:	f108 3aff 	add.w	sl, r8, #4294967295
 8008490:	f080 8088 	bcs.w	80085a4 <__udivmoddi4+0x2b4>
 8008494:	42a5      	cmp	r5, r4
 8008496:	f240 8085 	bls.w	80085a4 <__udivmoddi4+0x2b4>
 800849a:	f1a8 0802 	sub.w	r8, r8, #2
 800849e:	4464      	add	r4, ip
 80084a0:	1b64      	subs	r4, r4, r5
 80084a2:	b29d      	uxth	r5, r3
 80084a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80084a8:	fb09 4413 	mls	r4, r9, r3, r4
 80084ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80084b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80084b4:	45a6      	cmp	lr, r4
 80084b6:	d908      	bls.n	80084ca <__udivmoddi4+0x1da>
 80084b8:	eb1c 0404 	adds.w	r4, ip, r4
 80084bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80084c0:	d26c      	bcs.n	800859c <__udivmoddi4+0x2ac>
 80084c2:	45a6      	cmp	lr, r4
 80084c4:	d96a      	bls.n	800859c <__udivmoddi4+0x2ac>
 80084c6:	3b02      	subs	r3, #2
 80084c8:	4464      	add	r4, ip
 80084ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80084ce:	fba3 9502 	umull	r9, r5, r3, r2
 80084d2:	eba4 040e 	sub.w	r4, r4, lr
 80084d6:	42ac      	cmp	r4, r5
 80084d8:	46c8      	mov	r8, r9
 80084da:	46ae      	mov	lr, r5
 80084dc:	d356      	bcc.n	800858c <__udivmoddi4+0x29c>
 80084de:	d053      	beq.n	8008588 <__udivmoddi4+0x298>
 80084e0:	b156      	cbz	r6, 80084f8 <__udivmoddi4+0x208>
 80084e2:	ebb0 0208 	subs.w	r2, r0, r8
 80084e6:	eb64 040e 	sbc.w	r4, r4, lr
 80084ea:	fa04 f707 	lsl.w	r7, r4, r7
 80084ee:	40ca      	lsrs	r2, r1
 80084f0:	40cc      	lsrs	r4, r1
 80084f2:	4317      	orrs	r7, r2
 80084f4:	e9c6 7400 	strd	r7, r4, [r6]
 80084f8:	4618      	mov	r0, r3
 80084fa:	2100      	movs	r1, #0
 80084fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008500:	f1c3 0120 	rsb	r1, r3, #32
 8008504:	fa02 fc03 	lsl.w	ip, r2, r3
 8008508:	fa20 f201 	lsr.w	r2, r0, r1
 800850c:	fa25 f101 	lsr.w	r1, r5, r1
 8008510:	409d      	lsls	r5, r3
 8008512:	432a      	orrs	r2, r5
 8008514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008518:	fa1f fe8c 	uxth.w	lr, ip
 800851c:	fbb1 f0f7 	udiv	r0, r1, r7
 8008520:	fb07 1510 	mls	r5, r7, r0, r1
 8008524:	0c11      	lsrs	r1, r2, #16
 8008526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800852a:	fb00 f50e 	mul.w	r5, r0, lr
 800852e:	428d      	cmp	r5, r1
 8008530:	fa04 f403 	lsl.w	r4, r4, r3
 8008534:	d908      	bls.n	8008548 <__udivmoddi4+0x258>
 8008536:	eb1c 0101 	adds.w	r1, ip, r1
 800853a:	f100 38ff 	add.w	r8, r0, #4294967295
 800853e:	d22f      	bcs.n	80085a0 <__udivmoddi4+0x2b0>
 8008540:	428d      	cmp	r5, r1
 8008542:	d92d      	bls.n	80085a0 <__udivmoddi4+0x2b0>
 8008544:	3802      	subs	r0, #2
 8008546:	4461      	add	r1, ip
 8008548:	1b49      	subs	r1, r1, r5
 800854a:	b292      	uxth	r2, r2
 800854c:	fbb1 f5f7 	udiv	r5, r1, r7
 8008550:	fb07 1115 	mls	r1, r7, r5, r1
 8008554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008558:	fb05 f10e 	mul.w	r1, r5, lr
 800855c:	4291      	cmp	r1, r2
 800855e:	d908      	bls.n	8008572 <__udivmoddi4+0x282>
 8008560:	eb1c 0202 	adds.w	r2, ip, r2
 8008564:	f105 38ff 	add.w	r8, r5, #4294967295
 8008568:	d216      	bcs.n	8008598 <__udivmoddi4+0x2a8>
 800856a:	4291      	cmp	r1, r2
 800856c:	d914      	bls.n	8008598 <__udivmoddi4+0x2a8>
 800856e:	3d02      	subs	r5, #2
 8008570:	4462      	add	r2, ip
 8008572:	1a52      	subs	r2, r2, r1
 8008574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8008578:	e738      	b.n	80083ec <__udivmoddi4+0xfc>
 800857a:	4631      	mov	r1, r6
 800857c:	4630      	mov	r0, r6
 800857e:	e708      	b.n	8008392 <__udivmoddi4+0xa2>
 8008580:	4639      	mov	r1, r7
 8008582:	e6e6      	b.n	8008352 <__udivmoddi4+0x62>
 8008584:	4610      	mov	r0, r2
 8008586:	e6fb      	b.n	8008380 <__udivmoddi4+0x90>
 8008588:	4548      	cmp	r0, r9
 800858a:	d2a9      	bcs.n	80084e0 <__udivmoddi4+0x1f0>
 800858c:	ebb9 0802 	subs.w	r8, r9, r2
 8008590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008594:	3b01      	subs	r3, #1
 8008596:	e7a3      	b.n	80084e0 <__udivmoddi4+0x1f0>
 8008598:	4645      	mov	r5, r8
 800859a:	e7ea      	b.n	8008572 <__udivmoddi4+0x282>
 800859c:	462b      	mov	r3, r5
 800859e:	e794      	b.n	80084ca <__udivmoddi4+0x1da>
 80085a0:	4640      	mov	r0, r8
 80085a2:	e7d1      	b.n	8008548 <__udivmoddi4+0x258>
 80085a4:	46d0      	mov	r8, sl
 80085a6:	e77b      	b.n	80084a0 <__udivmoddi4+0x1b0>
 80085a8:	3d02      	subs	r5, #2
 80085aa:	4462      	add	r2, ip
 80085ac:	e732      	b.n	8008414 <__udivmoddi4+0x124>
 80085ae:	4608      	mov	r0, r1
 80085b0:	e70a      	b.n	80083c8 <__udivmoddi4+0xd8>
 80085b2:	4464      	add	r4, ip
 80085b4:	3802      	subs	r0, #2
 80085b6:	e742      	b.n	800843e <__udivmoddi4+0x14e>

080085b8 <__aeabi_idiv0>:
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop

080085bc <bootloader_uart_read_data>:
*   Description   : The function read the UART based cmd data and based on cmd it will process
*   Parameters    : p_args - NULL
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void  bootloader_uart_read_data(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		//memset(bl_rx_buffer,0,200);
		HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 80085c6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ca:	2201      	movs	r2, #1
 80085cc:	491d      	ldr	r1, [pc, #116]	; (8008644 <bootloader_uart_read_data+0x88>)
 80085ce:	481e      	ldr	r0, [pc, #120]	; (8008648 <bootloader_uart_read_data+0x8c>)
 80085d0:	f002 fb89 	bl	800ace6 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 80085d4:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <bootloader_uart_read_data+0x88>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	f04f 33ff 	mov.w	r3, #4294967295
 80085e2:	491a      	ldr	r1, [pc, #104]	; (800864c <bootloader_uart_read_data+0x90>)
 80085e4:	4818      	ldr	r0, [pc, #96]	; (8008648 <bootloader_uart_read_data+0x8c>)
 80085e6:	f002 fb7e 	bl	800ace6 <HAL_UART_Receive>

		switch(bl_rx_buffer[1])
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <bootloader_uart_read_data+0x88>)
 80085ec:	785b      	ldrb	r3, [r3, #1]
 80085ee:	3b51      	subs	r3, #81	; 0x51
 80085f0:	2b06      	cmp	r3, #6
 80085f2:	d821      	bhi.n	8008638 <bootloader_uart_read_data+0x7c>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <bootloader_uart_read_data+0x40>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008639 	.word	0x08008639
 8008604:	08008639 	.word	0x08008639
 8008608:	08008639 	.word	0x08008639
 800860c:	08008631 	.word	0x08008631
 8008610:	08008621 	.word	0x08008621
 8008614:	08008629 	.word	0x08008629
		{
            case BL_GET_VER:
            {
                bootloader_handle_getver_cmd(bl_rx_buffer);
 8008618:	480a      	ldr	r0, [pc, #40]	; (8008644 <bootloader_uart_read_data+0x88>)
 800861a:	f000 f847 	bl	80086ac <bootloader_handle_getver_cmd>
                break;
 800861e:	e00f      	b.n	8008640 <bootloader_uart_read_data+0x84>
            }
            case BL_FLASH_ERASE:
            {
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8008620:	4808      	ldr	r0, [pc, #32]	; (8008644 <bootloader_uart_read_data+0x88>)
 8008622:	f000 f8f5 	bl	8008810 <bootloader_handle_flash_erase_cmd>
                break;
 8008626:	e00b      	b.n	8008640 <bootloader_uart_read_data+0x84>
            }
            case BL_MEM_WRITE:
            {
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8008628:	4806      	ldr	r0, [pc, #24]	; (8008644 <bootloader_uart_read_data+0x88>)
 800862a:	f000 f95b 	bl	80088e4 <bootloader_handle_mem_write_cmd>
                break;
 800862e:	e007      	b.n	8008640 <bootloader_uart_read_data+0x84>
            }
            case BL_GO_TO_ADDR:
            {
                bootloader_handle_go_cmd(bl_rx_buffer);
 8008630:	4804      	ldr	r0, [pc, #16]	; (8008644 <bootloader_uart_read_data+0x88>)
 8008632:	f000 f883 	bl	800873c <bootloader_handle_go_cmd>
                break;
 8008636:	e003      	b.n	8008640 <bootloader_uart_read_data+0x84>
            }
             default:
             {
                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8008638:	4805      	ldr	r0, [pc, #20]	; (8008650 <bootloader_uart_read_data+0x94>)
 800863a:	f000 fb23 	bl	8008c84 <printmsg>
                break;
 800863e:	bf00      	nop
		HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8008640:	e7c1      	b.n	80085c6 <bootloader_uart_read_data+0xa>
 8008642:	bf00      	nop
 8008644:	20000080 	.word	0x20000080
 8008648:	20000150 	.word	0x20000150
 800864c:	20000081 	.word	0x20000081
 8008650:	0800bdd4 	.word	0x0800bdd4

08008654 <bootloader_jump_to_user_app>:
*   Description   : The function read the UART based cmd data and based on cmd it will process
*   Parameters    : p_args - NULL
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void bootloader_jump_to_user_app(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0

    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 800865a:	480f      	ldr	r0, [pc, #60]	; (8008698 <bootloader_jump_to_user_app+0x44>)
 800865c:	f000 fb12 	bl	8008c84 <printmsg>

    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8008660:	4b0e      	ldr	r3, [pc, #56]	; (800869c <bootloader_jump_to_user_app+0x48>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 8008666:	68f9      	ldr	r1, [r7, #12]
 8008668:	480d      	ldr	r0, [pc, #52]	; (80086a0 <bootloader_jump_to_user_app+0x4c>)
 800866a:	f000 fb0b 	bl	8008c84 <printmsg>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f383 8808 	msr	MSP, r3
}
 8008678:	bf00      	nop
    __set_MSP(msp_value);
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 800867a:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <bootloader_jump_to_user_app+0x50>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60bb      	str	r3, [r7, #8]
    app_reset_handler = (void*) resethandler_address;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	607b      	str	r3, [r7, #4]
    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4808      	ldr	r0, [pc, #32]	; (80086a8 <bootloader_jump_to_user_app+0x54>)
 8008688:	f000 fafc 	bl	8008c84 <printmsg>
    /*3. jump to reset handler of the user application*/
    app_reset_handler();
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4798      	blx	r3

}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	0800be0c 	.word	0x0800be0c
 800869c:	08008000 	.word	0x08008000
 80086a0:	0800be38 	.word	0x0800be38
 80086a4:	08008004 	.word	0x08008004
 80086a8:	0800be58 	.word	0x0800be58

080086ac <bootloader_handle_getver_cmd>:
*   Description   : Helper function to handle BL_GET_VER command *
*   Parameters    : p_args - bl_rx_buffer
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    /* verify the checksum*/
      printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 80086b4:	481d      	ldr	r0, [pc, #116]	; (800872c <bootloader_handle_getver_cmd+0x80>)
 80086b6:	f000 fae5 	bl	8008c84 <printmsg>

	 /*Total length of the command packet*/
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	3301      	adds	r3, #1
 80086c0:	617b      	str	r3, [r7, #20]

	  /*extract the CRC32 sent by the Host*/
	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4413      	add	r3, r2
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	613b      	str	r3, [r7, #16]

    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	3b04      	subs	r3, #4
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f9aa 	bl	8008a30 <bootloader_verify_crc>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d11a      	bne.n	8008718 <bootloader_handle_getver_cmd+0x6c>
    {
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80086e2:	4813      	ldr	r0, [pc, #76]	; (8008730 <bootloader_handle_getver_cmd+0x84>)
 80086e4:	f000 face 	bl	8008c84 <printmsg>
        /*checksum is correct..*/
        bootloader_send_ack(bl_rx_buffer[0],1);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2101      	movs	r1, #1
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 f972 	bl	80089d8 <bootloader_send_ack>
        bl_version=get_bootloader_version();
 80086f4:	f000 f9e4 	bl	8008ac0 <get_bootloader_version>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	4619      	mov	r1, r3
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	461a      	mov	r2, r3
 8008704:	480b      	ldr	r0, [pc, #44]	; (8008734 <bootloader_handle_getver_cmd+0x88>)
 8008706:	f000 fabd 	bl	8008c84 <printmsg>
        bootloader_uart_write_data(&bl_version,1);
 800870a:	f107 030f 	add.w	r3, r7, #15
 800870e:	2101      	movs	r1, #1
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f9c1 	bl	8008a98 <bootloader_uart_write_data>

        bootloader_send_nack();
    }


}
 8008716:	e004      	b.n	8008722 <bootloader_handle_getver_cmd+0x76>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8008718:	4807      	ldr	r0, [pc, #28]	; (8008738 <bootloader_handle_getver_cmd+0x8c>)
 800871a:	f000 fab3 	bl	8008c84 <printmsg>
        bootloader_send_nack();
 800871e:	f000 f975 	bl	8008a0c <bootloader_send_nack>
}
 8008722:	bf00      	nop
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	0800be84 	.word	0x0800be84
 8008730:	0800beb0 	.word	0x0800beb0
 8008734:	0800bed4 	.word	0x0800bed4
 8008738:	0800bef4 	.word	0x0800bef4

0800873c <bootloader_handle_go_cmd>:
*   Description   : Helper function to handle BL_GO_TO_ADDR command
*   Parameters    : p_args - *pBuffer
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8008744:	2300      	movs	r3, #0
 8008746:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 800874c:	2301      	movs	r3, #1
 800874e:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8008750:	4828      	ldr	r0, [pc, #160]	; (80087f4 <bootloader_handle_go_cmd+0xb8>)
 8008752:	f000 fa97 	bl	8008c84 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8008756:	4b28      	ldr	r3, [pc, #160]	; (80087f8 <bootloader_handle_go_cmd+0xbc>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	61bb      	str	r3, [r7, #24]

	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	3b04      	subs	r3, #4
 8008762:	4a25      	ldr	r2, [pc, #148]	; (80087f8 <bootloader_handle_go_cmd+0xbc>)
 8008764:	4413      	add	r3, r2
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	3b04      	subs	r3, #4
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4619      	mov	r1, r3
 8008772:	4821      	ldr	r0, [pc, #132]	; (80087f8 <bootloader_handle_go_cmd+0xbc>)
 8008774:	f000 f95c 	bl	8008a30 <bootloader_verify_crc>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d131      	bne.n	80087e2 <bootloader_handle_go_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800877e:	481f      	ldr	r0, [pc, #124]	; (80087fc <bootloader_handle_go_cmd+0xc0>)
 8008780:	f000 fa80 	bl	8008c84 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2101      	movs	r1, #1
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f924 	bl	80089d8 <bootloader_send_ack>
        go_address = *((uint32_t *)&pBuffer[2] );
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008796:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	4819      	ldr	r0, [pc, #100]	; (8008800 <bootloader_handle_go_cmd+0xc4>)
 800879c:	f000 fa72 	bl	8008c84 <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 80087a0:	69f8      	ldr	r0, [r7, #28]
 80087a2:	f000 f995 	bl	8008ad0 <verify_address>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d110      	bne.n	80087ce <bootloader_handle_go_cmd+0x92>
        {
            bootloader_uart_write_data(&addr_valid,1);
 80087ac:	f107 030f 	add.w	r3, r7, #15
 80087b0:	2101      	movs	r1, #1
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f970 	bl	8008a98 <bootloader_uart_write_data>
            go_address+=1; //make T bit =1
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	3301      	adds	r3, #1
 80087bc:	61fb      	str	r3, [r7, #28]
            void (*lets_jump)(void) = (void *)go_address;
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	613b      	str	r3, [r7, #16]
            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 80087c2:	4810      	ldr	r0, [pc, #64]	; (8008804 <bootloader_handle_go_cmd+0xc8>)
 80087c4:	f000 fa5e 	bl	8008c84 <printmsg>
            lets_jump();
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4798      	blx	r3
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 80087cc:	e00e      	b.n	80087ec <bootloader_handle_go_cmd+0xb0>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 80087ce:	480e      	ldr	r0, [pc, #56]	; (8008808 <bootloader_handle_go_cmd+0xcc>)
 80087d0:	f000 fa58 	bl	8008c84 <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 80087d4:	f107 030e 	add.w	r3, r7, #14
 80087d8:	2101      	movs	r1, #1
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f95c 	bl	8008a98 <bootloader_uart_write_data>
}
 80087e0:	e004      	b.n	80087ec <bootloader_handle_go_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80087e2:	480a      	ldr	r0, [pc, #40]	; (800880c <bootloader_handle_go_cmd+0xd0>)
 80087e4:	f000 fa4e 	bl	8008c84 <printmsg>
        bootloader_send_nack();
 80087e8:	f000 f910 	bl	8008a0c <bootloader_send_nack>
}
 80087ec:	bf00      	nop
 80087ee:	3720      	adds	r7, #32
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	0800bf14 	.word	0x0800bf14
 80087f8:	20000080 	.word	0x20000080
 80087fc:	0800beb0 	.word	0x0800beb0
 8008800:	0800bf3c 	.word	0x0800bf3c
 8008804:	0800bf58 	.word	0x0800bf58
 8008808:	0800bf80 	.word	0x0800bf80
 800880c:	0800bef4 	.word	0x0800bef4

08008810 <bootloader_handle_flash_erase_cmd>:
*   Description   :Helper function to handle BL_FLASH_ERASE command
*   Parameters    : p_args - *pBuffer
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 800881c:	482a      	ldr	r0, [pc, #168]	; (80088c8 <bootloader_handle_flash_erase_cmd+0xb8>)
 800881e:	f000 fa31 	bl	8008c84 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8008822:	4b2a      	ldr	r3, [pc, #168]	; (80088cc <bootloader_handle_flash_erase_cmd+0xbc>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	3b04      	subs	r3, #4
 800882e:	4a27      	ldr	r2, [pc, #156]	; (80088cc <bootloader_handle_flash_erase_cmd+0xbc>)
 8008830:	4413      	add	r3, r2
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	3b04      	subs	r3, #4
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4619      	mov	r1, r3
 800883e:	4823      	ldr	r0, [pc, #140]	; (80088cc <bootloader_handle_flash_erase_cmd+0xbc>)
 8008840:	f000 f8f6 	bl	8008a30 <bootloader_verify_crc>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d135      	bne.n	80088b6 <bootloader_handle_flash_erase_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800884a:	4821      	ldr	r0, [pc, #132]	; (80088d0 <bootloader_handle_flash_erase_cmd+0xc0>)
 800884c:	f000 fa1a 	bl	8008c84 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2101      	movs	r1, #1
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f8be 	bl	80089d8 <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3302      	adds	r3, #2
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	4619      	mov	r1, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3303      	adds	r3, #3
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	4819      	ldr	r0, [pc, #100]	; (80088d4 <bootloader_handle_flash_erase_cmd+0xc4>)
 800886e:	f000 fa09 	bl	8008c84 <printmsg>

        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8008872:	2201      	movs	r2, #1
 8008874:	2120      	movs	r1, #32
 8008876:	4818      	ldr	r0, [pc, #96]	; (80088d8 <bootloader_handle_flash_erase_cmd+0xc8>)
 8008878:	f001 fb58 	bl	8009f2c <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3302      	adds	r3, #2
 8008880:	781a      	ldrb	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3303      	adds	r3, #3
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	4619      	mov	r1, r3
 800888a:	4610      	mov	r0, r2
 800888c:	f000 f95e 	bl	8008b4c <execute_flash_erase>
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8008894:	2200      	movs	r2, #0
 8008896:	2120      	movs	r1, #32
 8008898:	480f      	ldr	r0, [pc, #60]	; (80088d8 <bootloader_handle_flash_erase_cmd+0xc8>)
 800889a:	f001 fb47 	bl	8009f2c <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4619      	mov	r1, r3
 80088a2:	480e      	ldr	r0, [pc, #56]	; (80088dc <bootloader_handle_flash_erase_cmd+0xcc>)
 80088a4:	f000 f9ee 	bl	8008c84 <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 80088a8:	f107 030f 	add.w	r3, r7, #15
 80088ac:	2101      	movs	r1, #1
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f8f2 	bl	8008a98 <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 80088b4:	e004      	b.n	80088c0 <bootloader_handle_flash_erase_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80088b6:	480a      	ldr	r0, [pc, #40]	; (80088e0 <bootloader_handle_flash_erase_cmd+0xd0>)
 80088b8:	f000 f9e4 	bl	8008c84 <printmsg>
        bootloader_send_nack();
 80088bc:	f000 f8a6 	bl	8008a0c <bootloader_send_nack>
}
 80088c0:	bf00      	nop
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	0800bfa4 	.word	0x0800bfa4
 80088cc:	20000080 	.word	0x20000080
 80088d0:	0800beb0 	.word	0x0800beb0
 80088d4:	0800bfd4 	.word	0x0800bfd4
 80088d8:	40020000 	.word	0x40020000
 80088dc:	0800c008 	.word	0x0800c008
 80088e0:	0800bef4 	.word	0x0800bef4

080088e4 <bootloader_handle_mem_write_cmd>:
*   Description   :Helper function to handle BL_MEM_WRITE command
*   Parameters    : p_args - *pBuffer
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
	uint8_t write_status = 0x00;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
	uint8_t payload_len = pBuffer[6];
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	799b      	ldrb	r3, [r3, #6]
 80088f4:	77fb      	strb	r3, [r7, #31]
	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80088fc:	61bb      	str	r3, [r7, #24]
    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 80088fe:	482e      	ldr	r0, [pc, #184]	; (80089b8 <bootloader_handle_mem_write_cmd+0xd4>)
 8008900:	f000 f9c0 	bl	8008c84 <printmsg>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8008904:	4b2d      	ldr	r3, [pc, #180]	; (80089bc <bootloader_handle_mem_write_cmd+0xd8>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	3b04      	subs	r3, #4
 8008910:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <bootloader_handle_mem_write_cmd+0xd8>)
 8008912:	4413      	add	r3, r2
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	613b      	str	r3, [r7, #16]
	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	3b04      	subs	r3, #4
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4619      	mov	r1, r3
 8008920:	4826      	ldr	r0, [pc, #152]	; (80089bc <bootloader_handle_mem_write_cmd+0xd8>)
 8008922:	f000 f885 	bl	8008a30 <bootloader_verify_crc>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d13b      	bne.n	80089a4 <bootloader_handle_mem_write_cmd+0xc0>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800892c:	4824      	ldr	r0, [pc, #144]	; (80089c0 <bootloader_handle_mem_write_cmd+0xdc>)
 800892e:	f000 f9a9 	bl	8008c84 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2101      	movs	r1, #1
 8008938:	4618      	mov	r0, r3
 800893a:	f000 f84d 	bl	80089d8 <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 800893e:	69b9      	ldr	r1, [r7, #24]
 8008940:	4820      	ldr	r0, [pc, #128]	; (80089c4 <bootloader_handle_mem_write_cmd+0xe0>)
 8008942:	f000 f99f 	bl	8008c84 <printmsg>
		if( verify_address(mem_address) == ADDR_VALID )
 8008946:	69b8      	ldr	r0, [r7, #24]
 8008948:	f000 f8c2 	bl	8008ad0 <verify_address>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d11c      	bne.n	800898c <bootloader_handle_mem_write_cmd+0xa8>
		{
            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8008952:	481d      	ldr	r0, [pc, #116]	; (80089c8 <bootloader_handle_mem_write_cmd+0xe4>)
 8008954:	f000 f996 	bl	8008c84 <printmsg>
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008958:	2201      	movs	r2, #1
 800895a:	2120      	movs	r1, #32
 800895c:	481b      	ldr	r0, [pc, #108]	; (80089cc <bootloader_handle_mem_write_cmd+0xe8>)
 800895e:	f001 fae5 	bl	8009f2c <HAL_GPIO_WritePin>
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3307      	adds	r3, #7
 8008966:	7ffa      	ldrb	r2, [r7, #31]
 8008968:	69b9      	ldr	r1, [r7, #24]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f935 	bl	8008bda <execute_mem_write>
 8008970:	4603      	mov	r3, r0
 8008972:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008974:	2200      	movs	r2, #0
 8008976:	2120      	movs	r1, #32
 8008978:	4814      	ldr	r0, [pc, #80]	; (80089cc <bootloader_handle_mem_write_cmd+0xe8>)
 800897a:	f001 fad7 	bl	8009f2c <HAL_GPIO_WritePin>
            bootloader_uart_write_data(&write_status,1);
 800897e:	f107 030f 	add.w	r3, r7, #15
 8008982:	2101      	movs	r1, #1
 8008984:	4618      	mov	r0, r3
 8008986:	f000 f887 	bl	8008a98 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 800898a:	e010      	b.n	80089ae <bootloader_handle_mem_write_cmd+0xca>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 800898c:	4810      	ldr	r0, [pc, #64]	; (80089d0 <bootloader_handle_mem_write_cmd+0xec>)
 800898e:	f000 f979 	bl	8008c84 <printmsg>
            write_status = ADDR_INVALID;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 8008996:	f107 030f 	add.w	r3, r7, #15
 800899a:	2101      	movs	r1, #1
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f87b 	bl	8008a98 <bootloader_uart_write_data>
}
 80089a2:	e004      	b.n	80089ae <bootloader_handle_mem_write_cmd+0xca>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80089a4:	480b      	ldr	r0, [pc, #44]	; (80089d4 <bootloader_handle_mem_write_cmd+0xf0>)
 80089a6:	f000 f96d 	bl	8008c84 <printmsg>
        bootloader_send_nack();
 80089aa:	f000 f82f 	bl	8008a0c <bootloader_send_nack>
}
 80089ae:	bf00      	nop
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	0800c030 	.word	0x0800c030
 80089bc:	20000080 	.word	0x20000080
 80089c0:	0800beb0 	.word	0x0800beb0
 80089c4:	0800c060 	.word	0x0800c060
 80089c8:	0800c088 	.word	0x0800c088
 80089cc:	40020000 	.word	0x40020000
 80089d0:	0800c0b0 	.word	0x0800c0b0
 80089d4:	0800bef4 	.word	0x0800bef4

080089d8 <bootloader_send_ack>:
*   Description   :This function sends ACK if CRC matches along with "len to follow"
*   Parameters    : p_args - int8_t command_code,uint8_t follow_len
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	460a      	mov	r2, r1
 80089e2:	71fb      	strb	r3, [r7, #7]
 80089e4:	4613      	mov	r3, r2
 80089e6:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 80089e8:	23a5      	movs	r3, #165	; 0xa5
 80089ea:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 80089ec:	79bb      	ldrb	r3, [r7, #6]
 80089ee:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 80089f0:	f107 010c 	add.w	r1, r7, #12
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	2202      	movs	r2, #2
 80089fa:	4803      	ldr	r0, [pc, #12]	; (8008a08 <bootloader_send_ack+0x30>)
 80089fc:	f002 f8e8 	bl	800abd0 <HAL_UART_Transmit>

}
 8008a00:	bf00      	nop
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000150 	.word	0x20000150

08008a0c <bootloader_send_nack>:
*   Description   :This function sends NACK "
*   Parameters    : p_args -NULL
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
void bootloader_send_nack(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8008a12:	237f      	movs	r3, #127	; 0x7f
 8008a14:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8008a16:	1df9      	adds	r1, r7, #7
 8008a18:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4803      	ldr	r0, [pc, #12]	; (8008a2c <bootloader_send_nack+0x20>)
 8008a20:	f002 f8d6 	bl	800abd0 <HAL_UART_Transmit>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20000150 	.word	0x20000150

08008a30 <bootloader_verify_crc>:
*   Description   :This verifies the CRC of the given buffer in pData
*   Parameters    : p_args -uint8_t *pData,uint32_t crc_host
*   Return Value  : uint8_t
*  ---------------------------------------------------------------------------*/
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8008a3c:	23ff      	movs	r3, #255	; 0xff
 8008a3e:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8008a40:	2300      	movs	r3, #0
 8008a42:	61bb      	str	r3, [r7, #24]
 8008a44:	e00f      	b.n	8008a66 <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8008a50:	f107 0314 	add.w	r3, r7, #20
 8008a54:	2201      	movs	r2, #1
 8008a56:	4619      	mov	r1, r3
 8008a58:	480e      	ldr	r0, [pc, #56]	; (8008a94 <bootloader_verify_crc+0x64>)
 8008a5a:	f000 fda8 	bl	80095ae <HAL_CRC_Accumulate>
 8008a5e:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	3301      	adds	r3, #1
 8008a64:	61bb      	str	r3, [r7, #24]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d3eb      	bcc.n	8008a46 <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <bootloader_verify_crc+0x64>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <bootloader_verify_crc+0x64>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f042 0201 	orr.w	r2, r2, #1
 8008a7c:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8008a7e:	69fa      	ldr	r2, [r7, #28]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d101      	bne.n	8008a8a <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e000      	b.n	8008a8c <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8008a8a:	2301      	movs	r3, #1
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3720      	adds	r7, #32
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20000148 	.word	0x20000148

08008a98 <bootloader_uart_write_data>:
*   Parameters    : p_args -uint8_t *pBuffer,uint32_t len
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	4803      	ldr	r0, [pc, #12]	; (8008abc <bootloader_uart_write_data+0x24>)
 8008aae:	f002 f88f 	bl	800abd0 <HAL_UART_Transmit>

}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000150 	.word	0x20000150

08008ac0 <get_bootloader_version>:
*   Description   :return value of MACRO
*   Parameters    : p_args -NULL
*   Return Value  : uint8_t
*  ---------------------------------------------------------------------------*/
uint8_t get_bootloader_version(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 8008ac4:	2310      	movs	r3, #16
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <verify_address>:
*   Description   :verify the address sent by the host .
*   Parameters    : p_args -uint32_t go_address
*   Return Value  : uint8_t
*  ---------------------------------------------------------------------------*/
uint8_t verify_address(uint32_t go_address)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ade:	d305      	bcc.n	8008aec <verify_address+0x1c>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <verify_address+0x68>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d801      	bhi.n	8008aec <verify_address+0x1c>
	{
		return ADDR_VALID;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e01e      	b.n	8008b2a <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <verify_address+0x68>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d305      	bcc.n	8008b00 <verify_address+0x30>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <verify_address+0x6c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d801      	bhi.n	8008b00 <verify_address+0x30>
	{
		return ADDR_VALID;
 8008afc:	2300      	movs	r3, #0
 8008afe:	e014      	b.n	8008b2a <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b06:	d305      	bcc.n	8008b14 <verify_address+0x44>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a0d      	ldr	r2, [pc, #52]	; (8008b40 <verify_address+0x70>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d801      	bhi.n	8008b14 <verify_address+0x44>
	{
		return ADDR_VALID;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e00a      	b.n	8008b2a <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a0b      	ldr	r2, [pc, #44]	; (8008b44 <verify_address+0x74>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d305      	bcc.n	8008b28 <verify_address+0x58>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a0a      	ldr	r2, [pc, #40]	; (8008b48 <verify_address+0x78>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d801      	bhi.n	8008b28 <verify_address+0x58>
	{
		return ADDR_VALID;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e000      	b.n	8008b2a <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8008b28:	2301      	movs	r3, #1
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	2001c000 	.word	0x2001c000
 8008b3c:	20020000 	.word	0x20020000
 8008b40:	0807ffff 	.word	0x0807ffff
 8008b44:	40024000 	.word	0x40024000
 8008b48:	40025000 	.word	0x40025000

08008b4c <execute_flash_erase>:
*   Description   :Erase the Entire Flash or sectors
*   Parameters    : p_args -uint8_t sector_number,uint8_t number_of_sector
*   Return Value  : uint8_t
*  ---------------------------------------------------------------------------*/
uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	460a      	mov	r2, r1
 8008b56:	71fb      	strb	r3, [r7, #7]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 8008b5c:	79bb      	ldrb	r3, [r7, #6]
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d901      	bls.n	8008b66 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8008b62:	2304      	movs	r3, #4
 8008b64:	e035      	b.n	8008bd2 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	2bff      	cmp	r3, #255	; 0xff
 8008b6a:	d002      	beq.n	8008b72 <execute_flash_erase+0x26>
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	2b07      	cmp	r3, #7
 8008b70:	d82e      	bhi.n	8008bd0 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	2bff      	cmp	r3, #255	; 0xff
 8008b76:	d102      	bne.n	8008b7e <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	613b      	str	r3, [r7, #16]
 8008b7c:	e012      	b.n	8008ba4 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	f1c3 0308 	rsb	r3, r3, #8
 8008b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( number_of_sector > remanining_sector)
 8008b88:	79ba      	ldrb	r2, [r7, #6]
 8008b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d902      	bls.n	8008b98 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 8008b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b96:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8008ba0:	79bb      	ldrb	r3, [r7, #6]
 8008ba2:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8008ba8:	f000 fd80 	bl	80096ac <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8008bac:	2302      	movs	r3, #2
 8008bae:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8008bb0:	f107 020c 	add.w	r2, r7, #12
 8008bb4:	f107 0310 	add.w	r3, r7, #16
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fee8 	bl	8009990 <HAL_FLASHEx_Erase>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8008bc6:	f000 fd93 	bl	80096f0 <HAL_FLASH_Lock>

		return status;
 8008bca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bce:	e000      	b.n	8008bd2 <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8008bd0:	2304      	movs	r3, #4
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3728      	adds	r7, #40	; 0x28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <execute_mem_write>:
 *   Description   :This function writes the contents of pBuffer to  "mem_address" byte by byte
 *   Parameters    : p_args -uint8_t *pBuffer,uint32_t mem_address, uint32_t len
 *   Return Value  : uint8_t
 *  ---------------------------------------------------------------------------*/
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8008bda:	b5b0      	push	{r4, r5, r7, lr}
 8008bdc:	b08a      	sub	sp, #40	; 0x28
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
    uint8_t status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t bytes_remaining = len;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	623b      	str	r3, [r7, #32]
    uint32_t bytes_written = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
    uint32_t chunk_size = 128;
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	617b      	str	r3, [r7, #20]
    HAL_FLASH_Unlock();
 8008bf8:	f000 fd58 	bl	80096ac <HAL_FLASH_Unlock>

    while (bytes_remaining > 0)
 8008bfc:	e037      	b.n	8008c6e <execute_mem_write+0x94>
    {
        uint32_t current_chunk_size = (bytes_remaining >= chunk_size) ? chunk_size : bytes_remaining;
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	4293      	cmp	r3, r2
 8008c04:	bf28      	it	cs
 8008c06:	4613      	movcs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
        for (uint32_t i = 0; i < current_chunk_size; i++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61bb      	str	r3, [r7, #24]
 8008c0e:	e022      	b.n	8008c56 <execute_mem_write+0x7c>
        {
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + bytes_written + i, pBuffer[bytes_written + i]);
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	441a      	add	r2, r3
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	18d1      	adds	r1, r2, r3
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	4413      	add	r3, r2
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2200      	movs	r2, #0
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	4615      	mov	r5, r2
 8008c2e:	4622      	mov	r2, r4
 8008c30:	462b      	mov	r3, r5
 8008c32:	2000      	movs	r0, #0
 8008c34:	f000 fce6 	bl	8009604 <HAL_FLASH_Program>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (status != HAL_OK)
 8008c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <execute_mem_write+0x76>
            {
                HAL_FLASH_Lock();
 8008c46:	f000 fd53 	bl	80096f0 <HAL_FLASH_Lock>
                return status;
 8008c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c4e:	e015      	b.n	8008c7c <execute_mem_write+0xa2>
        for (uint32_t i = 0; i < current_chunk_size; i++)
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	3301      	adds	r3, #1
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d3d8      	bcc.n	8008c10 <execute_mem_write+0x36>
            }
        }

        bytes_written += current_chunk_size;
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	4413      	add	r3, r2
 8008c64:	61fb      	str	r3, [r7, #28]
        bytes_remaining -= current_chunk_size;
 8008c66:	6a3a      	ldr	r2, [r7, #32]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	623b      	str	r3, [r7, #32]
    while (bytes_remaining > 0)
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1c4      	bne.n	8008bfe <execute_mem_write+0x24>
    }
    HAL_FLASH_Lock();
 8008c74:	f000 fd3c 	bl	80096f0 <HAL_FLASH_Lock>

    return status;
 8008c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3728      	adds	r7, #40	; 0x28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bdb0      	pop	{r4, r5, r7, pc}

08008c84 <printmsg>:
*   Parameters    : p_args -char *format,...
*   Return Value  : NULL
*  ---------------------------------------------------------------------------*/
/*  */
 void printmsg(char *format,...)
 {
 8008c84:	b40f      	push	{r0, r1, r2, r3}
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b096      	sub	sp, #88	; 0x58
 8008c8a:	af00      	add	r7, sp, #0

	char str[80];
	va_list args;
	va_start(args, format);
 8008c8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008c90:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8008c92:	f107 0308 	add.w	r3, r7, #8
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f002 fc00 	bl	800b4a0 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8008ca0:	f107 0308 	add.w	r3, r7, #8
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fab3 	bl	8008210 <strlen>
 8008caa:	4603      	mov	r3, r0
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f107 0108 	add.w	r1, r7, #8
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	4805      	ldr	r0, [pc, #20]	; (8008ccc <printmsg+0x48>)
 8008cb8:	f001 ff8a 	bl	800abd0 <HAL_UART_Transmit>
	va_end(args);
 }
 8008cbc:	bf00      	nop
 8008cbe:	3758      	adds	r7, #88	; 0x58
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cc6:	b004      	add	sp, #16
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20000198 	.word	0x20000198

08008cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008cd0:	b598      	push	{r3, r4, r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008cd4:	f000 faf8 	bl	80092c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008cd8:	f000 f848 	bl	8008d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008cdc:	f000 f91c 	bl	8008f18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008ce0:	f000 f8c6 	bl	8008e70 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008ce4:	f000 f8ee 	bl	8008ec4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8008ce8:	f000 f8ae 	bl	8008e48 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_RESET )
 8008cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008cf0:	4819      	ldr	r0, [pc, #100]	; (8008d58 <main+0x88>)
 8008cf2:	f001 f903 	bl	8009efc <HAL_GPIO_ReadPin>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d116      	bne.n	8008d2a <main+0x5a>
    {
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin ,GPIO_PIN_SET);
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	2120      	movs	r1, #32
 8008d00:	4816      	ldr	r0, [pc, #88]	; (8008d5c <main+0x8c>)
 8008d02:	f001 f913 	bl	8009f2c <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart3,(uint8_t *)msg1, strlen(msg1),HAL_MAX_DELAY);
 8008d06:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <main+0x90>)
 8008d08:	681c      	ldr	r4, [r3, #0]
 8008d0a:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <main+0x90>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fa7e 	bl	8008210 <strlen>
 8008d14:	4603      	mov	r3, r0
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4811      	ldr	r0, [pc, #68]	; (8008d64 <main+0x94>)
 8008d20:	f001 ff56 	bl	800abd0 <HAL_UART_Transmit>
  	  bootloader_uart_read_data();
 8008d24:	f7ff fc4a 	bl	80085bc <bootloader_uart_read_data>
 8008d28:	e015      	b.n	8008d56 <main+0x86>


    }
    else
    {
    	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin ,GPIO_PIN_RESET);
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2120      	movs	r1, #32
 8008d2e:	480b      	ldr	r0, [pc, #44]	; (8008d5c <main+0x8c>)
 8008d30:	f001 f8fc 	bl	8009f2c <HAL_GPIO_WritePin>
    	HAL_UART_Transmit(&huart3,(uint8_t *)msg2, strlen(msg2),HAL_MAX_DELAY);
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <main+0x98>)
 8008d36:	681c      	ldr	r4, [r3, #0]
 8008d38:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <main+0x98>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff fa67 	bl	8008210 <strlen>
 8008d42:	4603      	mov	r3, r0
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4805      	ldr	r0, [pc, #20]	; (8008d64 <main+0x94>)
 8008d4e:	f001 ff3f 	bl	800abd0 <HAL_UART_Transmit>
  		bootloader_jump_to_user_app();
 8008d52:	f7ff fc7f 	bl	8008654 <bootloader_jump_to_user_app>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008d56:	e7fe      	b.n	8008d56 <main+0x86>
 8008d58:	40020800 	.word	0x40020800
 8008d5c:	40020000 	.word	0x40020000
 8008d60:	20000000 	.word	0x20000000
 8008d64:	20000198 	.word	0x20000198
 8008d68:	20000004 	.word	0x20000004

08008d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b094      	sub	sp, #80	; 0x50
 8008d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d72:	f107 031c 	add.w	r3, r7, #28
 8008d76:	2234      	movs	r2, #52	; 0x34
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f002 fb9a 	bl	800b4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d80:	f107 0308 	add.w	r3, r7, #8
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	605a      	str	r2, [r3, #4]
 8008d8a:	609a      	str	r2, [r3, #8]
 8008d8c:	60da      	str	r2, [r3, #12]
 8008d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d90:	2300      	movs	r3, #0
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	4b2a      	ldr	r3, [pc, #168]	; (8008e40 <SystemClock_Config+0xd4>)
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	4a29      	ldr	r2, [pc, #164]	; (8008e40 <SystemClock_Config+0xd4>)
 8008d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8008da0:	4b27      	ldr	r3, [pc, #156]	; (8008e40 <SystemClock_Config+0xd4>)
 8008da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da8:	607b      	str	r3, [r7, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008dac:	2300      	movs	r3, #0
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <SystemClock_Config+0xd8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008db8:	4a22      	ldr	r2, [pc, #136]	; (8008e44 <SystemClock_Config+0xd8>)
 8008dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	4b20      	ldr	r3, [pc, #128]	; (8008e44 <SystemClock_Config+0xd8>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008dc8:	603b      	str	r3, [r7, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008dd4:	2310      	movs	r3, #16
 8008dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008dd8:	2302      	movs	r3, #2
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008de0:	2310      	movs	r3, #16
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008de4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008de8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008dea:	2304      	movs	r3, #4
 8008dec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008dee:	2302      	movs	r3, #2
 8008df0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008df2:	2302      	movs	r3, #2
 8008df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008df6:	f107 031c 	add.w	r3, r7, #28
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 fbfa 	bl	800a5f4 <HAL_RCC_OscConfig>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8008e06:	f000 f8f5 	bl	8008ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e0a:	230f      	movs	r3, #15
 8008e0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008e12:	2300      	movs	r3, #0
 8008e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008e20:	f107 0308 	add.w	r3, r7, #8
 8008e24:	2102      	movs	r1, #2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 f89a 	bl	8009f60 <HAL_RCC_ClockConfig>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8008e32:	f000 f8df 	bl	8008ff4 <Error_Handler>
  }
}
 8008e36:	bf00      	nop
 8008e38:	3750      	adds	r7, #80	; 0x50
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	40023800 	.word	0x40023800
 8008e44:	40007000 	.word	0x40007000

08008e48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <MX_CRC_Init+0x20>)
 8008e4e:	4a07      	ldr	r2, [pc, #28]	; (8008e6c <MX_CRC_Init+0x24>)
 8008e50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008e52:	4805      	ldr	r0, [pc, #20]	; (8008e68 <MX_CRC_Init+0x20>)
 8008e54:	f000 fb8f 	bl	8009576 <HAL_CRC_Init>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008e5e:	f000 f8c9 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008e62:	bf00      	nop
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000148 	.word	0x20000148
 8008e6c:	40023000 	.word	0x40023000

08008e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008e74:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008e76:	4a12      	ldr	r2, [pc, #72]	; (8008ec0 <MX_USART2_UART_Init+0x50>)
 8008e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008e7a:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008e82:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008e8e:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008e96:	220c      	movs	r2, #12
 8008e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e9a:	4b08      	ldr	r3, [pc, #32]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ea0:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008ea6:	4805      	ldr	r0, [pc, #20]	; (8008ebc <MX_USART2_UART_Init+0x4c>)
 8008ea8:	f001 fe42 	bl	800ab30 <HAL_UART_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008eb2:	f000 f89f 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008eb6:	bf00      	nop
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20000150 	.word	0x20000150
 8008ec0:	40004400 	.word	0x40004400

08008ec4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008ec8:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008eca:	4a12      	ldr	r2, [pc, #72]	; (8008f14 <MX_USART3_UART_Init+0x50>)
 8008ecc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008ece:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ed4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008ed6:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008ee8:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008eea:	220c      	movs	r2, #12
 8008eec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eee:	4b08      	ldr	r3, [pc, #32]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ef4:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008efa:	4805      	ldr	r0, [pc, #20]	; (8008f10 <MX_USART3_UART_Init+0x4c>)
 8008efc:	f001 fe18 	bl	800ab30 <HAL_UART_Init>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008f06:	f000 f875 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008f0a:	bf00      	nop
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000198 	.word	0x20000198
 8008f14:	40004800 	.word	0x40004800

08008f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	; 0x28
 8008f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f1e:	f107 0314 	add.w	r3, r7, #20
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	605a      	str	r2, [r3, #4]
 8008f28:	609a      	str	r2, [r3, #8]
 8008f2a:	60da      	str	r2, [r3, #12]
 8008f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f2e:	2300      	movs	r3, #0
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	4b2d      	ldr	r3, [pc, #180]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	4a2c      	ldr	r2, [pc, #176]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f38:	f043 0304 	orr.w	r3, r3, #4
 8008f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f3e:	4b2a      	ldr	r3, [pc, #168]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f52:	4a25      	ldr	r2, [pc, #148]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f58:	6313      	str	r3, [r2, #48]	; 0x30
 8008f5a:	4b23      	ldr	r3, [pc, #140]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f70:	f043 0301 	orr.w	r3, r3, #1
 8008f74:	6313      	str	r3, [r2, #48]	; 0x30
 8008f76:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	60bb      	str	r3, [r7, #8]
 8008f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f82:	2300      	movs	r3, #0
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f8c:	f043 0302 	orr.w	r3, r3, #2
 8008f90:	6313      	str	r3, [r2, #48]	; 0x30
 8008f92:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <MX_GPIO_Init+0xd0>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	607b      	str	r3, [r7, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2120      	movs	r1, #32
 8008fa2:	4812      	ldr	r0, [pc, #72]	; (8008fec <MX_GPIO_Init+0xd4>)
 8008fa4:	f000 ffc2 	bl	8009f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008fae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008fb8:	f107 0314 	add.w	r3, r7, #20
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	480c      	ldr	r0, [pc, #48]	; (8008ff0 <MX_GPIO_Init+0xd8>)
 8008fc0:	f000 fe08 	bl	8009bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008fd4:	f107 0314 	add.w	r3, r7, #20
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4804      	ldr	r0, [pc, #16]	; (8008fec <MX_GPIO_Init+0xd4>)
 8008fdc:	f000 fdfa 	bl	8009bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008fe0:	bf00      	nop
 8008fe2:	3728      	adds	r7, #40	; 0x28
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	40023800 	.word	0x40023800
 8008fec:	40020000 	.word	0x40020000
 8008ff0:	40020800 	.word	0x40020800

08008ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008ff8:	b672      	cpsid	i
}
 8008ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008ffc:	e7fe      	b.n	8008ffc <Error_Handler+0x8>
	...

08009000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009006:	2300      	movs	r3, #0
 8009008:	607b      	str	r3, [r7, #4]
 800900a:	4b10      	ldr	r3, [pc, #64]	; (800904c <HAL_MspInit+0x4c>)
 800900c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900e:	4a0f      	ldr	r2, [pc, #60]	; (800904c <HAL_MspInit+0x4c>)
 8009010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009014:	6453      	str	r3, [r2, #68]	; 0x44
 8009016:	4b0d      	ldr	r3, [pc, #52]	; (800904c <HAL_MspInit+0x4c>)
 8009018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009022:	2300      	movs	r3, #0
 8009024:	603b      	str	r3, [r7, #0]
 8009026:	4b09      	ldr	r3, [pc, #36]	; (800904c <HAL_MspInit+0x4c>)
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	4a08      	ldr	r2, [pc, #32]	; (800904c <HAL_MspInit+0x4c>)
 800902c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009030:	6413      	str	r3, [r2, #64]	; 0x40
 8009032:	4b06      	ldr	r3, [pc, #24]	; (800904c <HAL_MspInit+0x4c>)
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800903e:	2007      	movs	r0, #7
 8009040:	f000 fa66 	bl	8009510 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	40023800 	.word	0x40023800

08009050 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a0b      	ldr	r2, [pc, #44]	; (800908c <HAL_CRC_MspInit+0x3c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d10d      	bne.n	800907e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <HAL_CRC_MspInit+0x40>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	4a09      	ldr	r2, [pc, #36]	; (8009090 <HAL_CRC_MspInit+0x40>)
 800906c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009070:	6313      	str	r3, [r2, #48]	; 0x30
 8009072:	4b07      	ldr	r3, [pc, #28]	; (8009090 <HAL_CRC_MspInit+0x40>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800907e:	bf00      	nop
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	40023000 	.word	0x40023000
 8009090:	40023800 	.word	0x40023800

08009094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08c      	sub	sp, #48	; 0x30
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800909c:	f107 031c 	add.w	r3, r7, #28
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	605a      	str	r2, [r3, #4]
 80090a6:	609a      	str	r2, [r3, #8]
 80090a8:	60da      	str	r2, [r3, #12]
 80090aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a32      	ldr	r2, [pc, #200]	; (800917c <HAL_UART_MspInit+0xe8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d12c      	bne.n	8009110 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80090b6:	2300      	movs	r3, #0
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	4b31      	ldr	r3, [pc, #196]	; (8009180 <HAL_UART_MspInit+0xec>)
 80090bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090be:	4a30      	ldr	r2, [pc, #192]	; (8009180 <HAL_UART_MspInit+0xec>)
 80090c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090c4:	6413      	str	r3, [r2, #64]	; 0x40
 80090c6:	4b2e      	ldr	r3, [pc, #184]	; (8009180 <HAL_UART_MspInit+0xec>)
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ce:	61bb      	str	r3, [r7, #24]
 80090d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090d2:	2300      	movs	r3, #0
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <HAL_UART_MspInit+0xec>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090da:	4a29      	ldr	r2, [pc, #164]	; (8009180 <HAL_UART_MspInit+0xec>)
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	6313      	str	r3, [r2, #48]	; 0x30
 80090e2:	4b27      	ldr	r3, [pc, #156]	; (8009180 <HAL_UART_MspInit+0xec>)
 80090e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80090ee:	230c      	movs	r3, #12
 80090f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f2:	2302      	movs	r3, #2
 80090f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090fa:	2303      	movs	r3, #3
 80090fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80090fe:	2307      	movs	r3, #7
 8009100:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009102:	f107 031c 	add.w	r3, r7, #28
 8009106:	4619      	mov	r1, r3
 8009108:	481e      	ldr	r0, [pc, #120]	; (8009184 <HAL_UART_MspInit+0xf0>)
 800910a:	f000 fd63 	bl	8009bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800910e:	e031      	b.n	8009174 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a1c      	ldr	r2, [pc, #112]	; (8009188 <HAL_UART_MspInit+0xf4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d12c      	bne.n	8009174 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800911a:	2300      	movs	r3, #0
 800911c:	613b      	str	r3, [r7, #16]
 800911e:	4b18      	ldr	r3, [pc, #96]	; (8009180 <HAL_UART_MspInit+0xec>)
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	4a17      	ldr	r2, [pc, #92]	; (8009180 <HAL_UART_MspInit+0xec>)
 8009124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009128:	6413      	str	r3, [r2, #64]	; 0x40
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <HAL_UART_MspInit+0xec>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	4b11      	ldr	r3, [pc, #68]	; (8009180 <HAL_UART_MspInit+0xec>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	4a10      	ldr	r2, [pc, #64]	; (8009180 <HAL_UART_MspInit+0xec>)
 8009140:	f043 0304 	orr.w	r3, r3, #4
 8009144:	6313      	str	r3, [r2, #48]	; 0x30
 8009146:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <HAL_UART_MspInit+0xec>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009152:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009158:	2302      	movs	r3, #2
 800915a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800915c:	2300      	movs	r3, #0
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009160:	2303      	movs	r3, #3
 8009162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009164:	2307      	movs	r3, #7
 8009166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009168:	f107 031c 	add.w	r3, r7, #28
 800916c:	4619      	mov	r1, r3
 800916e:	4807      	ldr	r0, [pc, #28]	; (800918c <HAL_UART_MspInit+0xf8>)
 8009170:	f000 fd30 	bl	8009bd4 <HAL_GPIO_Init>
}
 8009174:	bf00      	nop
 8009176:	3730      	adds	r7, #48	; 0x30
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	40004400 	.word	0x40004400
 8009180:	40023800 	.word	0x40023800
 8009184:	40020000 	.word	0x40020000
 8009188:	40004800 	.word	0x40004800
 800918c:	40020800 	.word	0x40020800

08009190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009194:	e7fe      	b.n	8009194 <NMI_Handler+0x4>

08009196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009196:	b480      	push	{r7}
 8009198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800919a:	e7fe      	b.n	800919a <HardFault_Handler+0x4>

0800919c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091a0:	e7fe      	b.n	80091a0 <MemManage_Handler+0x4>

080091a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091a2:	b480      	push	{r7}
 80091a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091a6:	e7fe      	b.n	80091a6 <BusFault_Handler+0x4>

080091a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091ac:	e7fe      	b.n	80091ac <UsageFault_Handler+0x4>

080091ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091ae:	b480      	push	{r7}
 80091b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091b2:	bf00      	nop
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091ca:	b480      	push	{r7}
 80091cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091ce:	bf00      	nop
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091dc:	f000 f8c6 	bl	800936c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80091e0:	bf00      	nop
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80091ec:	4a14      	ldr	r2, [pc, #80]	; (8009240 <_sbrk+0x5c>)
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <_sbrk+0x60>)
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80091f8:	4b13      	ldr	r3, [pc, #76]	; (8009248 <_sbrk+0x64>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009200:	4b11      	ldr	r3, [pc, #68]	; (8009248 <_sbrk+0x64>)
 8009202:	4a12      	ldr	r2, [pc, #72]	; (800924c <_sbrk+0x68>)
 8009204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <_sbrk+0x64>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4413      	add	r3, r2
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	429a      	cmp	r2, r3
 8009212:	d207      	bcs.n	8009224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009214:	f002 f956 	bl	800b4c4 <__errno>
 8009218:	4603      	mov	r3, r0
 800921a:	220c      	movs	r2, #12
 800921c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	e009      	b.n	8009238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009224:	4b08      	ldr	r3, [pc, #32]	; (8009248 <_sbrk+0x64>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800922a:	4b07      	ldr	r3, [pc, #28]	; (8009248 <_sbrk+0x64>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	4a05      	ldr	r2, [pc, #20]	; (8009248 <_sbrk+0x64>)
 8009234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009236:	68fb      	ldr	r3, [r7, #12]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	20020000 	.word	0x20020000
 8009244:	00000400 	.word	0x00000400
 8009248:	200001e0 	.word	0x200001e0
 800924c:	20000350 	.word	0x20000350

08009250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <SystemInit+0x20>)
 8009256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925a:	4a05      	ldr	r2, [pc, #20]	; (8009270 <SystemInit+0x20>)
 800925c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	e000ed00 	.word	0xe000ed00

08009274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80092ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009278:	f7ff ffea 	bl	8009250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800927c:	480c      	ldr	r0, [pc, #48]	; (80092b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800927e:	490d      	ldr	r1, [pc, #52]	; (80092b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009280:	4a0d      	ldr	r2, [pc, #52]	; (80092b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009284:	e002      	b.n	800928c <LoopCopyDataInit>

08009286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800928a:	3304      	adds	r3, #4

0800928c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800928c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800928e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009290:	d3f9      	bcc.n	8009286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009292:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009294:	4c0a      	ldr	r4, [pc, #40]	; (80092c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009298:	e001      	b.n	800929e <LoopFillZerobss>

0800929a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800929a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800929c:	3204      	adds	r2, #4

0800929e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800929e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092a0:	d3fb      	bcc.n	800929a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80092a2:	f002 f915 	bl	800b4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80092a6:	f7ff fd13 	bl	8008cd0 <main>
  bx  lr    
 80092aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80092ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80092b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80092b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80092b8:	0800c1ac 	.word	0x0800c1ac
  ldr r2, =_sbss
 80092bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80092c0:	20000350 	.word	0x20000350

080092c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80092c4:	e7fe      	b.n	80092c4 <ADC_IRQHandler>
	...

080092c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80092cc:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <HAL_Init+0x40>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <HAL_Init+0x40>)
 80092d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80092d8:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <HAL_Init+0x40>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a0a      	ldr	r2, [pc, #40]	; (8009308 <HAL_Init+0x40>)
 80092de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092e4:	4b08      	ldr	r3, [pc, #32]	; (8009308 <HAL_Init+0x40>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a07      	ldr	r2, [pc, #28]	; (8009308 <HAL_Init+0x40>)
 80092ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092f0:	2003      	movs	r0, #3
 80092f2:	f000 f90d 	bl	8009510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092f6:	2000      	movs	r0, #0
 80092f8:	f000 f808 	bl	800930c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092fc:	f7ff fe80 	bl	8009000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	40023c00 	.word	0x40023c00

0800930c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009314:	4b12      	ldr	r3, [pc, #72]	; (8009360 <HAL_InitTick+0x54>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	4b12      	ldr	r3, [pc, #72]	; (8009364 <HAL_InitTick+0x58>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	4619      	mov	r1, r3
 800931e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009322:	fbb3 f3f1 	udiv	r3, r3, r1
 8009326:	fbb2 f3f3 	udiv	r3, r2, r3
 800932a:	4618      	mov	r0, r3
 800932c:	f000 f917 	bl	800955e <HAL_SYSTICK_Config>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e00e      	b.n	8009358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b0f      	cmp	r3, #15
 800933e:	d80a      	bhi.n	8009356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009340:	2200      	movs	r2, #0
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	f000 f8ed 	bl	8009526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800934c:	4a06      	ldr	r2, [pc, #24]	; (8009368 <HAL_InitTick+0x5c>)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	e000      	b.n	8009358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20000008 	.word	0x20000008
 8009364:	20000010 	.word	0x20000010
 8009368:	2000000c 	.word	0x2000000c

0800936c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009370:	4b06      	ldr	r3, [pc, #24]	; (800938c <HAL_IncTick+0x20>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	461a      	mov	r2, r3
 8009376:	4b06      	ldr	r3, [pc, #24]	; (8009390 <HAL_IncTick+0x24>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4413      	add	r3, r2
 800937c:	4a04      	ldr	r2, [pc, #16]	; (8009390 <HAL_IncTick+0x24>)
 800937e:	6013      	str	r3, [r2, #0]
}
 8009380:	bf00      	nop
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000010 	.word	0x20000010
 8009390:	200001e4 	.word	0x200001e4

08009394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
  return uwTick;
 8009398:	4b03      	ldr	r3, [pc, #12]	; (80093a8 <HAL_GetTick+0x14>)
 800939a:	681b      	ldr	r3, [r3, #0]
}
 800939c:	4618      	mov	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	200001e4 	.word	0x200001e4

080093ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093bc:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <__NVIC_SetPriorityGrouping+0x44>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80093c8:	4013      	ands	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80093d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093de:	4a04      	ldr	r2, [pc, #16]	; (80093f0 <__NVIC_SetPriorityGrouping+0x44>)
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	60d3      	str	r3, [r2, #12]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	e000ed00 	.word	0xe000ed00

080093f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <__NVIC_GetPriorityGrouping+0x18>)
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	0a1b      	lsrs	r3, r3, #8
 80093fe:	f003 0307 	and.w	r3, r3, #7
}
 8009402:	4618      	mov	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	e000ed00 	.word	0xe000ed00

08009410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800941c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009420:	2b00      	cmp	r3, #0
 8009422:	db0a      	blt.n	800943a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	b2da      	uxtb	r2, r3
 8009428:	490c      	ldr	r1, [pc, #48]	; (800945c <__NVIC_SetPriority+0x4c>)
 800942a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800942e:	0112      	lsls	r2, r2, #4
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	440b      	add	r3, r1
 8009434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009438:	e00a      	b.n	8009450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	b2da      	uxtb	r2, r3
 800943e:	4908      	ldr	r1, [pc, #32]	; (8009460 <__NVIC_SetPriority+0x50>)
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	3b04      	subs	r3, #4
 8009448:	0112      	lsls	r2, r2, #4
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	440b      	add	r3, r1
 800944e:	761a      	strb	r2, [r3, #24]
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	e000e100 	.word	0xe000e100
 8009460:	e000ed00 	.word	0xe000ed00

08009464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009464:	b480      	push	{r7}
 8009466:	b089      	sub	sp, #36	; 0x24
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f1c3 0307 	rsb	r3, r3, #7
 800947e:	2b04      	cmp	r3, #4
 8009480:	bf28      	it	cs
 8009482:	2304      	movcs	r3, #4
 8009484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	3304      	adds	r3, #4
 800948a:	2b06      	cmp	r3, #6
 800948c:	d902      	bls.n	8009494 <NVIC_EncodePriority+0x30>
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	3b03      	subs	r3, #3
 8009492:	e000      	b.n	8009496 <NVIC_EncodePriority+0x32>
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009498:	f04f 32ff 	mov.w	r2, #4294967295
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	43da      	mvns	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	401a      	ands	r2, r3
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094ac:	f04f 31ff 	mov.w	r1, #4294967295
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	fa01 f303 	lsl.w	r3, r1, r3
 80094b6:	43d9      	mvns	r1, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094bc:	4313      	orrs	r3, r2
         );
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3724      	adds	r7, #36	; 0x24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094dc:	d301      	bcc.n	80094e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80094de:	2301      	movs	r3, #1
 80094e0:	e00f      	b.n	8009502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80094e2:	4a0a      	ldr	r2, [pc, #40]	; (800950c <SysTick_Config+0x40>)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80094ea:	210f      	movs	r1, #15
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	f7ff ff8e 	bl	8009410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <SysTick_Config+0x40>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80094fa:	4b04      	ldr	r3, [pc, #16]	; (800950c <SysTick_Config+0x40>)
 80094fc:	2207      	movs	r2, #7
 80094fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	e000e010 	.word	0xe000e010

08009510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff ff47 	bl	80093ac <__NVIC_SetPriorityGrouping>
}
 800951e:	bf00      	nop
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009526:	b580      	push	{r7, lr}
 8009528:	b086      	sub	sp, #24
 800952a:	af00      	add	r7, sp, #0
 800952c:	4603      	mov	r3, r0
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009534:	2300      	movs	r3, #0
 8009536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009538:	f7ff ff5c 	bl	80093f4 <__NVIC_GetPriorityGrouping>
 800953c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	6978      	ldr	r0, [r7, #20]
 8009544:	f7ff ff8e 	bl	8009464 <NVIC_EncodePriority>
 8009548:	4602      	mov	r2, r0
 800954a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff ff5d 	bl	8009410 <__NVIC_SetPriority>
}
 8009556:	bf00      	nop
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff ffb0 	bl	80094cc <SysTick_Config>
 800956c:	4603      	mov	r3, r0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e00e      	b.n	80095a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	795b      	ldrb	r3, [r3, #5]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d105      	bne.n	800959e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff fd59 	bl	8009050 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b087      	sub	sp, #28
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80095ba:	2300      	movs	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2202      	movs	r2, #2
 80095c2:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]
 80095c8:	e00a      	b.n	80095e0 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	441a      	add	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6812      	ldr	r2, [r2, #0]
 80095d8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	3301      	adds	r3, #1
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d3f0      	bcc.n	80095ca <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80095f6:	693b      	ldr	r3, [r7, #16]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009616:	4b23      	ldr	r3, [pc, #140]	; (80096a4 <HAL_FLASH_Program+0xa0>)
 8009618:	7e1b      	ldrb	r3, [r3, #24]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_FLASH_Program+0x1e>
 800961e:	2302      	movs	r3, #2
 8009620:	e03b      	b.n	800969a <HAL_FLASH_Program+0x96>
 8009622:	4b20      	ldr	r3, [pc, #128]	; (80096a4 <HAL_FLASH_Program+0xa0>)
 8009624:	2201      	movs	r2, #1
 8009626:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009628:	f24c 3050 	movw	r0, #50000	; 0xc350
 800962c:	f000 f870 	bl	8009710 <FLASH_WaitForLastOperation>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d12b      	bne.n	8009692 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d105      	bne.n	800964c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009640:	783b      	ldrb	r3, [r7, #0]
 8009642:	4619      	mov	r1, r3
 8009644:	68b8      	ldr	r0, [r7, #8]
 8009646:	f000 f91b 	bl	8009880 <FLASH_Program_Byte>
 800964a:	e016      	b.n	800967a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d105      	bne.n	800965e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009652:	883b      	ldrh	r3, [r7, #0]
 8009654:	4619      	mov	r1, r3
 8009656:	68b8      	ldr	r0, [r7, #8]
 8009658:	f000 f8ee 	bl	8009838 <FLASH_Program_HalfWord>
 800965c:	e00d      	b.n	800967a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b02      	cmp	r3, #2
 8009662:	d105      	bne.n	8009670 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	4619      	mov	r1, r3
 8009668:	68b8      	ldr	r0, [r7, #8]
 800966a:	f000 f8c3 	bl	80097f4 <FLASH_Program_Word>
 800966e:	e004      	b.n	800967a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009674:	68b8      	ldr	r0, [r7, #8]
 8009676:	f000 f88b 	bl	8009790 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800967a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800967e:	f000 f847 	bl	8009710 <FLASH_WaitForLastOperation>
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8009686:	4b08      	ldr	r3, [pc, #32]	; (80096a8 <HAL_FLASH_Program+0xa4>)
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	4a07      	ldr	r2, [pc, #28]	; (80096a8 <HAL_FLASH_Program+0xa4>)
 800968c:	f023 0301 	bic.w	r3, r3, #1
 8009690:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009692:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <HAL_FLASH_Program+0xa0>)
 8009694:	2200      	movs	r2, #0
 8009696:	761a      	strb	r2, [r3, #24]

  return status;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200001e8 	.word	0x200001e8
 80096a8:	40023c00 	.word	0x40023c00

080096ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80096b6:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <HAL_FLASH_Unlock+0x38>)
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	da0b      	bge.n	80096d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <HAL_FLASH_Unlock+0x38>)
 80096c0:	4a09      	ldr	r2, [pc, #36]	; (80096e8 <HAL_FLASH_Unlock+0x3c>)
 80096c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <HAL_FLASH_Unlock+0x38>)
 80096c6:	4a09      	ldr	r2, [pc, #36]	; (80096ec <HAL_FLASH_Unlock+0x40>)
 80096c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80096ca:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <HAL_FLASH_Unlock+0x38>)
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	da01      	bge.n	80096d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80096d6:	79fb      	ldrb	r3, [r7, #7]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	40023c00 	.word	0x40023c00
 80096e8:	45670123 	.word	0x45670123
 80096ec:	cdef89ab 	.word	0xcdef89ab

080096f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <HAL_FLASH_Lock+0x1c>)
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	4a04      	ldr	r2, [pc, #16]	; (800970c <HAL_FLASH_Lock+0x1c>)
 80096fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096fe:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	40023c00 	.word	0x40023c00

08009710 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800971c:	4b1a      	ldr	r3, [pc, #104]	; (8009788 <FLASH_WaitForLastOperation+0x78>)
 800971e:	2200      	movs	r2, #0
 8009720:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009722:	f7ff fe37 	bl	8009394 <HAL_GetTick>
 8009726:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8009728:	e010      	b.n	800974c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009730:	d00c      	beq.n	800974c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <FLASH_WaitForLastOperation+0x38>
 8009738:	f7ff fe2c 	bl	8009394 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d201      	bcs.n	800974c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e019      	b.n	8009780 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800974c:	4b0f      	ldr	r3, [pc, #60]	; (800978c <FLASH_WaitForLastOperation+0x7c>)
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1e8      	bne.n	800972a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009758:	4b0c      	ldr	r3, [pc, #48]	; (800978c <FLASH_WaitForLastOperation+0x7c>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009764:	4b09      	ldr	r3, [pc, #36]	; (800978c <FLASH_WaitForLastOperation+0x7c>)
 8009766:	2201      	movs	r2, #1
 8009768:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800976a:	4b08      	ldr	r3, [pc, #32]	; (800978c <FLASH_WaitForLastOperation+0x7c>)
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009776:	f000 f8a5 	bl	80098c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e000      	b.n	8009780 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800977e:	2300      	movs	r3, #0

}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	200001e8 	.word	0x200001e8
 800978c:	40023c00 	.word	0x40023c00

08009790 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800979c:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <FLASH_Program_DoubleWord+0x60>)
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	4a13      	ldr	r2, [pc, #76]	; (80097f0 <FLASH_Program_DoubleWord+0x60>)
 80097a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80097a8:	4b11      	ldr	r3, [pc, #68]	; (80097f0 <FLASH_Program_DoubleWord+0x60>)
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	4a10      	ldr	r2, [pc, #64]	; (80097f0 <FLASH_Program_DoubleWord+0x60>)
 80097ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80097b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80097b4:	4b0e      	ldr	r3, [pc, #56]	; (80097f0 <FLASH_Program_DoubleWord+0x60>)
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	4a0d      	ldr	r2, [pc, #52]	; (80097f0 <FLASH_Program_DoubleWord+0x60>)
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80097c6:	f3bf 8f6f 	isb	sy
}
 80097ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80097cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	000a      	movs	r2, r1
 80097da:	2300      	movs	r3, #0
 80097dc:	68f9      	ldr	r1, [r7, #12]
 80097de:	3104      	adds	r1, #4
 80097e0:	4613      	mov	r3, r2
 80097e2:	600b      	str	r3, [r1, #0]
}
 80097e4:	bf00      	nop
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	40023c00 	.word	0x40023c00

080097f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80097fe:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <FLASH_Program_Word+0x40>)
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	4a0c      	ldr	r2, [pc, #48]	; (8009834 <FLASH_Program_Word+0x40>)
 8009804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009808:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800980a:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <FLASH_Program_Word+0x40>)
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	4a09      	ldr	r2, [pc, #36]	; (8009834 <FLASH_Program_Word+0x40>)
 8009810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009814:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009816:	4b07      	ldr	r3, [pc, #28]	; (8009834 <FLASH_Program_Word+0x40>)
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	4a06      	ldr	r2, [pc, #24]	; (8009834 <FLASH_Program_Word+0x40>)
 800981c:	f043 0301 	orr.w	r3, r3, #1
 8009820:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	601a      	str	r2, [r3, #0]
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	40023c00 	.word	0x40023c00

08009838 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009844:	4b0d      	ldr	r3, [pc, #52]	; (800987c <FLASH_Program_HalfWord+0x44>)
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	4a0c      	ldr	r2, [pc, #48]	; (800987c <FLASH_Program_HalfWord+0x44>)
 800984a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800984e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <FLASH_Program_HalfWord+0x44>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	4a09      	ldr	r2, [pc, #36]	; (800987c <FLASH_Program_HalfWord+0x44>)
 8009856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800985a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800985c:	4b07      	ldr	r3, [pc, #28]	; (800987c <FLASH_Program_HalfWord+0x44>)
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	4a06      	ldr	r2, [pc, #24]	; (800987c <FLASH_Program_HalfWord+0x44>)
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	887a      	ldrh	r2, [r7, #2]
 800986c:	801a      	strh	r2, [r3, #0]
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40023c00 	.word	0x40023c00

08009880 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <FLASH_Program_Byte+0x40>)
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	4a0b      	ldr	r2, [pc, #44]	; (80098c0 <FLASH_Program_Byte+0x40>)
 8009892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009898:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <FLASH_Program_Byte+0x40>)
 800989a:	4a09      	ldr	r2, [pc, #36]	; (80098c0 <FLASH_Program_Byte+0x40>)
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <FLASH_Program_Byte+0x40>)
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	4a06      	ldr	r2, [pc, #24]	; (80098c0 <FLASH_Program_Byte+0x40>)
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	701a      	strb	r2, [r3, #0]
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	40023c00 	.word	0x40023c00

080098c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80098c4:	b480      	push	{r7}
 80098c6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80098c8:	4b2f      	ldr	r3, [pc, #188]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f003 0310 	and.w	r3, r3, #16
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d008      	beq.n	80098e6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80098d4:	4b2d      	ldr	r3, [pc, #180]	; (800998c <FLASH_SetErrorCode+0xc8>)
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	f043 0310 	orr.w	r3, r3, #16
 80098dc:	4a2b      	ldr	r2, [pc, #172]	; (800998c <FLASH_SetErrorCode+0xc8>)
 80098de:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80098e0:	4b29      	ldr	r3, [pc, #164]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 80098e2:	2210      	movs	r2, #16
 80098e4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80098e6:	4b28      	ldr	r3, [pc, #160]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d008      	beq.n	8009904 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80098f2:	4b26      	ldr	r3, [pc, #152]	; (800998c <FLASH_SetErrorCode+0xc8>)
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	f043 0308 	orr.w	r3, r3, #8
 80098fa:	4a24      	ldr	r2, [pc, #144]	; (800998c <FLASH_SetErrorCode+0xc8>)
 80098fc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80098fe:	4b22      	ldr	r3, [pc, #136]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 8009900:	2220      	movs	r2, #32
 8009902:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009904:	4b20      	ldr	r3, [pc, #128]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990c:	2b00      	cmp	r3, #0
 800990e:	d008      	beq.n	8009922 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009910:	4b1e      	ldr	r3, [pc, #120]	; (800998c <FLASH_SetErrorCode+0xc8>)
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f043 0304 	orr.w	r3, r3, #4
 8009918:	4a1c      	ldr	r2, [pc, #112]	; (800998c <FLASH_SetErrorCode+0xc8>)
 800991a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 800991e:	2240      	movs	r2, #64	; 0x40
 8009920:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009922:	4b19      	ldr	r3, [pc, #100]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992a:	2b00      	cmp	r3, #0
 800992c:	d008      	beq.n	8009940 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800992e:	4b17      	ldr	r3, [pc, #92]	; (800998c <FLASH_SetErrorCode+0xc8>)
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	f043 0302 	orr.w	r3, r3, #2
 8009936:	4a15      	ldr	r2, [pc, #84]	; (800998c <FLASH_SetErrorCode+0xc8>)
 8009938:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 800993c:	2280      	movs	r2, #128	; 0x80
 800993e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009948:	2b00      	cmp	r3, #0
 800994a:	d009      	beq.n	8009960 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800994c:	4b0f      	ldr	r3, [pc, #60]	; (800998c <FLASH_SetErrorCode+0xc8>)
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f043 0301 	orr.w	r3, r3, #1
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <FLASH_SetErrorCode+0xc8>)
 8009956:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 800995a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800995e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009960:	4b09      	ldr	r3, [pc, #36]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0302 	and.w	r3, r3, #2
 8009968:	2b00      	cmp	r3, #0
 800996a:	d008      	beq.n	800997e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800996c:	4b07      	ldr	r3, [pc, #28]	; (800998c <FLASH_SetErrorCode+0xc8>)
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	f043 0320 	orr.w	r3, r3, #32
 8009974:	4a05      	ldr	r2, [pc, #20]	; (800998c <FLASH_SetErrorCode+0xc8>)
 8009976:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009978:	4b03      	ldr	r3, [pc, #12]	; (8009988 <FLASH_SetErrorCode+0xc4>)
 800997a:	2202      	movs	r2, #2
 800997c:	60da      	str	r2, [r3, #12]
  }
}
 800997e:	bf00      	nop
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	40023c00 	.word	0x40023c00
 800998c:	200001e8 	.word	0x200001e8

08009990 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80099a2:	4b31      	ldr	r3, [pc, #196]	; (8009a68 <HAL_FLASHEx_Erase+0xd8>)
 80099a4:	7e1b      	ldrb	r3, [r3, #24]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d101      	bne.n	80099ae <HAL_FLASHEx_Erase+0x1e>
 80099aa:	2302      	movs	r3, #2
 80099ac:	e058      	b.n	8009a60 <HAL_FLASHEx_Erase+0xd0>
 80099ae:	4b2e      	ldr	r3, [pc, #184]	; (8009a68 <HAL_FLASHEx_Erase+0xd8>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80099b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80099b8:	f7ff feaa 	bl	8009710 <FLASH_WaitForLastOperation>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d148      	bne.n	8009a58 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f04f 32ff 	mov.w	r2, #4294967295
 80099cc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d115      	bne.n	8009a02 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f000 f844 	bl	8009a70 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80099e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80099ec:	f7ff fe90 	bl	8009710 <FLASH_WaitForLastOperation>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80099f4:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <HAL_FLASHEx_Erase+0xdc>)
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	4a1c      	ldr	r2, [pc, #112]	; (8009a6c <HAL_FLASHEx_Erase+0xdc>)
 80099fa:	f023 0304 	bic.w	r3, r3, #4
 80099fe:	6113      	str	r3, [r2, #16]
 8009a00:	e028      	b.n	8009a54 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	60bb      	str	r3, [r7, #8]
 8009a08:	e01c      	b.n	8009a44 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	4619      	mov	r1, r3
 8009a12:	68b8      	ldr	r0, [r7, #8]
 8009a14:	f000 f850 	bl	8009ab8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009a18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a1c:	f7ff fe78 	bl	8009710 <FLASH_WaitForLastOperation>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <HAL_FLASHEx_Erase+0xdc>)
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	4a10      	ldr	r2, [pc, #64]	; (8009a6c <HAL_FLASHEx_Erase+0xdc>)
 8009a2a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8009a2e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	601a      	str	r2, [r3, #0]
          break;
 8009a3c:	e00a      	b.n	8009a54 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60bb      	str	r3, [r7, #8]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d3da      	bcc.n	8009a0a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009a54:	f000 f878 	bl	8009b48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009a58:	4b03      	ldr	r3, [pc, #12]	; (8009a68 <HAL_FLASHEx_Erase+0xd8>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	761a      	strb	r2, [r3, #24]

  return status;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	200001e8 	.word	0x200001e8
 8009a6c:	40023c00 	.word	0x40023c00

08009a70 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	6039      	str	r1, [r7, #0]
 8009a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009a7c:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <FLASH_MassErase+0x44>)
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	4a0c      	ldr	r2, [pc, #48]	; (8009ab4 <FLASH_MassErase+0x44>)
 8009a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <FLASH_MassErase+0x44>)
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <FLASH_MassErase+0x44>)
 8009a8e:	f043 0304 	orr.w	r3, r3, #4
 8009a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8009a94:	4b07      	ldr	r3, [pc, #28]	; (8009ab4 <FLASH_MassErase+0x44>)
 8009a96:	691a      	ldr	r2, [r3, #16]
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	4a05      	ldr	r2, [pc, #20]	; (8009ab4 <FLASH_MassErase+0x44>)
 8009aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aa4:	6113      	str	r3, [r2, #16]
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	40023c00 	.word	0x40023c00

08009ab8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	e010      	b.n	8009af6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d103      	bne.n	8009ae2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	e009      	b.n	8009af6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d103      	bne.n	8009af0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e002      	b.n	8009af6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009af0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009af4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009af6:	4b13      	ldr	r3, [pc, #76]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	4a12      	ldr	r2, [pc, #72]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009b02:	4b10      	ldr	r3, [pc, #64]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	490f      	ldr	r1, [pc, #60]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009b0e:	4b0d      	ldr	r3, [pc, #52]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	4a0c      	ldr	r2, [pc, #48]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009b18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009b1a:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b1c:	691a      	ldr	r2, [r3, #16]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	4313      	orrs	r3, r2
 8009b24:	4a07      	ldr	r2, [pc, #28]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b26:	f043 0302 	orr.w	r3, r3, #2
 8009b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <FLASH_Erase_Sector+0x8c>)
 8009b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b36:	6113      	str	r3, [r2, #16]
}
 8009b38:	bf00      	nop
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	40023c00 	.word	0x40023c00

08009b48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009b4c:	4b20      	ldr	r3, [pc, #128]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d017      	beq.n	8009b88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009b58:	4b1d      	ldr	r3, [pc, #116]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a1c      	ldr	r2, [pc, #112]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009b64:	4b1a      	ldr	r3, [pc, #104]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a19      	ldr	r2, [pc, #100]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a16      	ldr	r2, [pc, #88]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009b7c:	4b14      	ldr	r3, [pc, #80]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a13      	ldr	r2, [pc, #76]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b86:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009b88:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d017      	beq.n	8009bc4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009b94:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a0d      	ldr	r2, [pc, #52]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009ba0:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009ba6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a07      	ldr	r2, [pc, #28]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009bb8:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a04      	ldr	r2, [pc, #16]	; (8009bd0 <FLASH_FlushCaches+0x88>)
 8009bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bc2:	6013      	str	r3, [r2, #0]
  }
}
 8009bc4:	bf00      	nop
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40023c00 	.word	0x40023c00

08009bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b089      	sub	sp, #36	; 0x24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009bea:	2300      	movs	r3, #0
 8009bec:	61fb      	str	r3, [r7, #28]
 8009bee:	e165      	b.n	8009ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	4013      	ands	r3, r2
 8009c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	f040 8154 	bne.w	8009eb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f003 0303 	and.w	r3, r3, #3
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d005      	beq.n	8009c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d130      	bne.n	8009c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	2203      	movs	r2, #3
 8009c32:	fa02 f303 	lsl.w	r3, r2, r3
 8009c36:	43db      	mvns	r3, r3
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	43db      	mvns	r3, r3
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	091b      	lsrs	r3, r3, #4
 8009c72:	f003 0201 	and.w	r2, r3, #1
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69ba      	ldr	r2, [r7, #24]
 8009c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f003 0303 	and.w	r3, r3, #3
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	d017      	beq.n	8009cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	2203      	movs	r2, #3
 8009ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca4:	43db      	mvns	r3, r3
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	4013      	ands	r3, r2
 8009caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb8:	69ba      	ldr	r2, [r7, #24]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	69ba      	ldr	r2, [r7, #24]
 8009cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d123      	bne.n	8009d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	08da      	lsrs	r2, r3, #3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3208      	adds	r2, #8
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	220f      	movs	r2, #15
 8009ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cec:	43db      	mvns	r3, r3
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	691a      	ldr	r2, [r3, #16]
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f003 0307 	and.w	r3, r3, #7
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	fa02 f303 	lsl.w	r3, r2, r3
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	08da      	lsrs	r2, r3, #3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3208      	adds	r2, #8
 8009d12:	69b9      	ldr	r1, [r7, #24]
 8009d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	2203      	movs	r2, #3
 8009d24:	fa02 f303 	lsl.w	r3, r2, r3
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f003 0203 	and.w	r2, r3, #3
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 80ae 	beq.w	8009eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	4b5d      	ldr	r3, [pc, #372]	; (8009ed4 <HAL_GPIO_Init+0x300>)
 8009d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d62:	4a5c      	ldr	r2, [pc, #368]	; (8009ed4 <HAL_GPIO_Init+0x300>)
 8009d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d68:	6453      	str	r3, [r2, #68]	; 0x44
 8009d6a:	4b5a      	ldr	r3, [pc, #360]	; (8009ed4 <HAL_GPIO_Init+0x300>)
 8009d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009d76:	4a58      	ldr	r2, [pc, #352]	; (8009ed8 <HAL_GPIO_Init+0x304>)
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	089b      	lsrs	r3, r3, #2
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	f003 0303 	and.w	r3, r3, #3
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	220f      	movs	r2, #15
 8009d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d92:	43db      	mvns	r3, r3
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	4013      	ands	r3, r2
 8009d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a4f      	ldr	r2, [pc, #316]	; (8009edc <HAL_GPIO_Init+0x308>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d025      	beq.n	8009dee <HAL_GPIO_Init+0x21a>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a4e      	ldr	r2, [pc, #312]	; (8009ee0 <HAL_GPIO_Init+0x30c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d01f      	beq.n	8009dea <HAL_GPIO_Init+0x216>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a4d      	ldr	r2, [pc, #308]	; (8009ee4 <HAL_GPIO_Init+0x310>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d019      	beq.n	8009de6 <HAL_GPIO_Init+0x212>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a4c      	ldr	r2, [pc, #304]	; (8009ee8 <HAL_GPIO_Init+0x314>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d013      	beq.n	8009de2 <HAL_GPIO_Init+0x20e>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a4b      	ldr	r2, [pc, #300]	; (8009eec <HAL_GPIO_Init+0x318>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00d      	beq.n	8009dde <HAL_GPIO_Init+0x20a>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a4a      	ldr	r2, [pc, #296]	; (8009ef0 <HAL_GPIO_Init+0x31c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d007      	beq.n	8009dda <HAL_GPIO_Init+0x206>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a49      	ldr	r2, [pc, #292]	; (8009ef4 <HAL_GPIO_Init+0x320>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d101      	bne.n	8009dd6 <HAL_GPIO_Init+0x202>
 8009dd2:	2306      	movs	r3, #6
 8009dd4:	e00c      	b.n	8009df0 <HAL_GPIO_Init+0x21c>
 8009dd6:	2307      	movs	r3, #7
 8009dd8:	e00a      	b.n	8009df0 <HAL_GPIO_Init+0x21c>
 8009dda:	2305      	movs	r3, #5
 8009ddc:	e008      	b.n	8009df0 <HAL_GPIO_Init+0x21c>
 8009dde:	2304      	movs	r3, #4
 8009de0:	e006      	b.n	8009df0 <HAL_GPIO_Init+0x21c>
 8009de2:	2303      	movs	r3, #3
 8009de4:	e004      	b.n	8009df0 <HAL_GPIO_Init+0x21c>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e002      	b.n	8009df0 <HAL_GPIO_Init+0x21c>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <HAL_GPIO_Init+0x21c>
 8009dee:	2300      	movs	r3, #0
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	f002 0203 	and.w	r2, r2, #3
 8009df6:	0092      	lsls	r2, r2, #2
 8009df8:	4093      	lsls	r3, r2
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e00:	4935      	ldr	r1, [pc, #212]	; (8009ed8 <HAL_GPIO_Init+0x304>)
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	089b      	lsrs	r3, r3, #2
 8009e06:	3302      	adds	r3, #2
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009e0e:	4b3a      	ldr	r3, [pc, #232]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	43db      	mvns	r3, r3
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009e32:	4a31      	ldr	r2, [pc, #196]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009e38:	4b2f      	ldr	r3, [pc, #188]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	43db      	mvns	r3, r3
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	4013      	ands	r3, r2
 8009e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009e5c:	4a26      	ldr	r2, [pc, #152]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009e62:	4b25      	ldr	r3, [pc, #148]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	43db      	mvns	r3, r3
 8009e6c:	69ba      	ldr	r2, [r7, #24]
 8009e6e:	4013      	ands	r3, r2
 8009e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009e86:	4a1c      	ldr	r2, [pc, #112]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009e8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	43db      	mvns	r3, r3
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009ea8:	69ba      	ldr	r2, [r7, #24]
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009eb0:	4a11      	ldr	r2, [pc, #68]	; (8009ef8 <HAL_GPIO_Init+0x324>)
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	61fb      	str	r3, [r7, #28]
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	2b0f      	cmp	r3, #15
 8009ec0:	f67f ae96 	bls.w	8009bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	3724      	adds	r7, #36	; 0x24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	40023800 	.word	0x40023800
 8009ed8:	40013800 	.word	0x40013800
 8009edc:	40020000 	.word	0x40020000
 8009ee0:	40020400 	.word	0x40020400
 8009ee4:	40020800 	.word	0x40020800
 8009ee8:	40020c00 	.word	0x40020c00
 8009eec:	40021000 	.word	0x40021000
 8009ef0:	40021400 	.word	0x40021400
 8009ef4:	40021800 	.word	0x40021800
 8009ef8:	40013c00 	.word	0x40013c00

08009efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	887b      	ldrh	r3, [r7, #2]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f14:	2301      	movs	r3, #1
 8009f16:	73fb      	strb	r3, [r7, #15]
 8009f18:	e001      	b.n	8009f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	807b      	strh	r3, [r7, #2]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009f3c:	787b      	ldrb	r3, [r7, #1]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f42:	887a      	ldrh	r2, [r7, #2]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009f48:	e003      	b.n	8009f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009f4a:	887b      	ldrh	r3, [r7, #2]
 8009f4c:	041a      	lsls	r2, r3, #16
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	619a      	str	r2, [r3, #24]
}
 8009f52:	bf00      	nop
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
	...

08009f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e0cc      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f74:	4b68      	ldr	r3, [pc, #416]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 030f 	and.w	r3, r3, #15
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d90c      	bls.n	8009f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f82:	4b65      	ldr	r3, [pc, #404]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f8a:	4b63      	ldr	r3, [pc, #396]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 030f 	and.w	r3, r3, #15
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d001      	beq.n	8009f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e0b8      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d020      	beq.n	8009fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fb4:	4b59      	ldr	r3, [pc, #356]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	4a58      	ldr	r2, [pc, #352]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009fbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fcc:	4b53      	ldr	r3, [pc, #332]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	4a52      	ldr	r2, [pc, #328]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fd8:	4b50      	ldr	r3, [pc, #320]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	494d      	ldr	r1, [pc, #308]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d044      	beq.n	800a080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d107      	bne.n	800a00e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ffe:	4b47      	ldr	r3, [pc, #284]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d119      	bne.n	800a03e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e07f      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d003      	beq.n	800a01e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d107      	bne.n	800a02e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a01e:	4b3f      	ldr	r3, [pc, #252]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d109      	bne.n	800a03e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e06f      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a02e:	4b3b      	ldr	r3, [pc, #236]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e067      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a03e:	4b37      	ldr	r3, [pc, #220]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f023 0203 	bic.w	r2, r3, #3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	4934      	ldr	r1, [pc, #208]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a050:	f7ff f9a0 	bl	8009394 <HAL_GetTick>
 800a054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a056:	e00a      	b.n	800a06e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a058:	f7ff f99c 	bl	8009394 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	f241 3288 	movw	r2, #5000	; 0x1388
 800a066:	4293      	cmp	r3, r2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e04f      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a06e:	4b2b      	ldr	r3, [pc, #172]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f003 020c 	and.w	r2, r3, #12
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d1eb      	bne.n	800a058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a080:	4b25      	ldr	r3, [pc, #148]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 030f 	and.w	r3, r3, #15
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d20c      	bcs.n	800a0a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a08e:	4b22      	ldr	r3, [pc, #136]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a096:	4b20      	ldr	r3, [pc, #128]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 030f 	and.w	r3, r3, #15
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d001      	beq.n	800a0a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e032      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0b4:	4b19      	ldr	r3, [pc, #100]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	4916      	ldr	r1, [pc, #88]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0308 	and.w	r3, r3, #8
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0d2:	4b12      	ldr	r3, [pc, #72]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	490e      	ldr	r1, [pc, #56]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a0e6:	f000 f855 	bl	800a194 <HAL_RCC_GetSysClockFreq>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	091b      	lsrs	r3, r3, #4
 800a0f2:	f003 030f 	and.w	r3, r3, #15
 800a0f6:	490a      	ldr	r1, [pc, #40]	; (800a120 <HAL_RCC_ClockConfig+0x1c0>)
 800a0f8:	5ccb      	ldrb	r3, [r1, r3]
 800a0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fe:	4a09      	ldr	r2, [pc, #36]	; (800a124 <HAL_RCC_ClockConfig+0x1c4>)
 800a100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <HAL_RCC_ClockConfig+0x1c8>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff f900 	bl	800930c <HAL_InitTick>

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	40023c00 	.word	0x40023c00
 800a11c:	40023800 	.word	0x40023800
 800a120:	0800c150 	.word	0x0800c150
 800a124:	20000008 	.word	0x20000008
 800a128:	2000000c 	.word	0x2000000c

0800a12c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a130:	4b03      	ldr	r3, [pc, #12]	; (800a140 <HAL_RCC_GetHCLKFreq+0x14>)
 800a132:	681b      	ldr	r3, [r3, #0]
}
 800a134:	4618      	mov	r0, r3
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	20000008 	.word	0x20000008

0800a144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a148:	f7ff fff0 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800a14c:	4602      	mov	r2, r0
 800a14e:	4b05      	ldr	r3, [pc, #20]	; (800a164 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	0a9b      	lsrs	r3, r3, #10
 800a154:	f003 0307 	and.w	r3, r3, #7
 800a158:	4903      	ldr	r1, [pc, #12]	; (800a168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a15a:	5ccb      	ldrb	r3, [r1, r3]
 800a15c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a160:	4618      	mov	r0, r3
 800a162:	bd80      	pop	{r7, pc}
 800a164:	40023800 	.word	0x40023800
 800a168:	0800c160 	.word	0x0800c160

0800a16c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a170:	f7ff ffdc 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800a174:	4602      	mov	r2, r0
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	0b5b      	lsrs	r3, r3, #13
 800a17c:	f003 0307 	and.w	r3, r3, #7
 800a180:	4903      	ldr	r1, [pc, #12]	; (800a190 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a182:	5ccb      	ldrb	r3, [r1, r3]
 800a184:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a188:	4618      	mov	r0, r3
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	40023800 	.word	0x40023800
 800a190:	0800c160 	.word	0x0800c160

0800a194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a198:	b0ae      	sub	sp, #184	; 0xb8
 800a19a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1ba:	4bcb      	ldr	r3, [pc, #812]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f003 030c 	and.w	r3, r3, #12
 800a1c2:	2b0c      	cmp	r3, #12
 800a1c4:	f200 8206 	bhi.w	800a5d4 <HAL_RCC_GetSysClockFreq+0x440>
 800a1c8:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a205 	.word	0x0800a205
 800a1d4:	0800a5d5 	.word	0x0800a5d5
 800a1d8:	0800a5d5 	.word	0x0800a5d5
 800a1dc:	0800a5d5 	.word	0x0800a5d5
 800a1e0:	0800a20d 	.word	0x0800a20d
 800a1e4:	0800a5d5 	.word	0x0800a5d5
 800a1e8:	0800a5d5 	.word	0x0800a5d5
 800a1ec:	0800a5d5 	.word	0x0800a5d5
 800a1f0:	0800a215 	.word	0x0800a215
 800a1f4:	0800a5d5 	.word	0x0800a5d5
 800a1f8:	0800a5d5 	.word	0x0800a5d5
 800a1fc:	0800a5d5 	.word	0x0800a5d5
 800a200:	0800a405 	.word	0x0800a405
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a204:	4bb9      	ldr	r3, [pc, #740]	; (800a4ec <HAL_RCC_GetSysClockFreq+0x358>)
 800a206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a20a:	e1e7      	b.n	800a5dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a20c:	4bb8      	ldr	r3, [pc, #736]	; (800a4f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a20e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a212:	e1e3      	b.n	800a5dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a214:	4bb4      	ldr	r3, [pc, #720]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a21c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a220:	4bb1      	ldr	r3, [pc, #708]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d071      	beq.n	800a310 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a22c:	4bae      	ldr	r3, [pc, #696]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	099b      	lsrs	r3, r3, #6
 800a232:	2200      	movs	r2, #0
 800a234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a238:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a23c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a248:	2300      	movs	r3, #0
 800a24a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a24e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a252:	4622      	mov	r2, r4
 800a254:	462b      	mov	r3, r5
 800a256:	f04f 0000 	mov.w	r0, #0
 800a25a:	f04f 0100 	mov.w	r1, #0
 800a25e:	0159      	lsls	r1, r3, #5
 800a260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a264:	0150      	lsls	r0, r2, #5
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4621      	mov	r1, r4
 800a26c:	1a51      	subs	r1, r2, r1
 800a26e:	6439      	str	r1, [r7, #64]	; 0x40
 800a270:	4629      	mov	r1, r5
 800a272:	eb63 0301 	sbc.w	r3, r3, r1
 800a276:	647b      	str	r3, [r7, #68]	; 0x44
 800a278:	f04f 0200 	mov.w	r2, #0
 800a27c:	f04f 0300 	mov.w	r3, #0
 800a280:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a284:	4649      	mov	r1, r9
 800a286:	018b      	lsls	r3, r1, #6
 800a288:	4641      	mov	r1, r8
 800a28a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a28e:	4641      	mov	r1, r8
 800a290:	018a      	lsls	r2, r1, #6
 800a292:	4641      	mov	r1, r8
 800a294:	1a51      	subs	r1, r2, r1
 800a296:	63b9      	str	r1, [r7, #56]	; 0x38
 800a298:	4649      	mov	r1, r9
 800a29a:	eb63 0301 	sbc.w	r3, r3, r1
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	00cb      	lsls	r3, r1, #3
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2b6:	4641      	mov	r1, r8
 800a2b8:	00ca      	lsls	r2, r1, #3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	460a      	mov	r2, r1
 800a2ca:	eb42 0303 	adc.w	r3, r2, r3
 800a2ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a2d0:	f04f 0200 	mov.w	r2, #0
 800a2d4:	f04f 0300 	mov.w	r3, #0
 800a2d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a2dc:	4629      	mov	r1, r5
 800a2de:	024b      	lsls	r3, r1, #9
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	024a      	lsls	r2, r1, #9
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a300:	f7fd ffde 	bl	80082c0 <__aeabi_uldivmod>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4613      	mov	r3, r2
 800a30a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a30e:	e067      	b.n	800a3e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a310:	4b75      	ldr	r3, [pc, #468]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	099b      	lsrs	r3, r3, #6
 800a316:	2200      	movs	r2, #0
 800a318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a31c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a328:	67bb      	str	r3, [r7, #120]	; 0x78
 800a32a:	2300      	movs	r3, #0
 800a32c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a32e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a332:	4622      	mov	r2, r4
 800a334:	462b      	mov	r3, r5
 800a336:	f04f 0000 	mov.w	r0, #0
 800a33a:	f04f 0100 	mov.w	r1, #0
 800a33e:	0159      	lsls	r1, r3, #5
 800a340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a344:	0150      	lsls	r0, r2, #5
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4621      	mov	r1, r4
 800a34c:	1a51      	subs	r1, r2, r1
 800a34e:	62b9      	str	r1, [r7, #40]	; 0x28
 800a350:	4629      	mov	r1, r5
 800a352:	eb63 0301 	sbc.w	r3, r3, r1
 800a356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a358:	f04f 0200 	mov.w	r2, #0
 800a35c:	f04f 0300 	mov.w	r3, #0
 800a360:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a364:	4649      	mov	r1, r9
 800a366:	018b      	lsls	r3, r1, #6
 800a368:	4641      	mov	r1, r8
 800a36a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a36e:	4641      	mov	r1, r8
 800a370:	018a      	lsls	r2, r1, #6
 800a372:	4641      	mov	r1, r8
 800a374:	ebb2 0a01 	subs.w	sl, r2, r1
 800a378:	4649      	mov	r1, r9
 800a37a:	eb63 0b01 	sbc.w	fp, r3, r1
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	f04f 0300 	mov.w	r3, #0
 800a386:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a38a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a38e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a392:	4692      	mov	sl, r2
 800a394:	469b      	mov	fp, r3
 800a396:	4623      	mov	r3, r4
 800a398:	eb1a 0303 	adds.w	r3, sl, r3
 800a39c:	623b      	str	r3, [r7, #32]
 800a39e:	462b      	mov	r3, r5
 800a3a0:	eb4b 0303 	adc.w	r3, fp, r3
 800a3a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a6:	f04f 0200 	mov.w	r2, #0
 800a3aa:	f04f 0300 	mov.w	r3, #0
 800a3ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	028b      	lsls	r3, r1, #10
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a3bc:	4621      	mov	r1, r4
 800a3be:	028a      	lsls	r2, r1, #10
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	673b      	str	r3, [r7, #112]	; 0x70
 800a3cc:	677a      	str	r2, [r7, #116]	; 0x74
 800a3ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a3d2:	f7fd ff75 	bl	80082c0 <__aeabi_uldivmod>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4613      	mov	r3, r2
 800a3dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a3e0:	4b41      	ldr	r3, [pc, #260]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	0c1b      	lsrs	r3, r3, #16
 800a3e6:	f003 0303 	and.w	r3, r3, #3
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 800a3f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a402:	e0eb      	b.n	800a5dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a404:	4b38      	ldr	r3, [pc, #224]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a40c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a410:	4b35      	ldr	r3, [pc, #212]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d06b      	beq.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a41c:	4b32      	ldr	r3, [pc, #200]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	099b      	lsrs	r3, r3, #6
 800a422:	2200      	movs	r2, #0
 800a424:	66bb      	str	r3, [r7, #104]	; 0x68
 800a426:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42e:	663b      	str	r3, [r7, #96]	; 0x60
 800a430:	2300      	movs	r3, #0
 800a432:	667b      	str	r3, [r7, #100]	; 0x64
 800a434:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a438:	4622      	mov	r2, r4
 800a43a:	462b      	mov	r3, r5
 800a43c:	f04f 0000 	mov.w	r0, #0
 800a440:	f04f 0100 	mov.w	r1, #0
 800a444:	0159      	lsls	r1, r3, #5
 800a446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a44a:	0150      	lsls	r0, r2, #5
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4621      	mov	r1, r4
 800a452:	1a51      	subs	r1, r2, r1
 800a454:	61b9      	str	r1, [r7, #24]
 800a456:	4629      	mov	r1, r5
 800a458:	eb63 0301 	sbc.w	r3, r3, r1
 800a45c:	61fb      	str	r3, [r7, #28]
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	f04f 0300 	mov.w	r3, #0
 800a466:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a46a:	4659      	mov	r1, fp
 800a46c:	018b      	lsls	r3, r1, #6
 800a46e:	4651      	mov	r1, sl
 800a470:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a474:	4651      	mov	r1, sl
 800a476:	018a      	lsls	r2, r1, #6
 800a478:	4651      	mov	r1, sl
 800a47a:	ebb2 0801 	subs.w	r8, r2, r1
 800a47e:	4659      	mov	r1, fp
 800a480:	eb63 0901 	sbc.w	r9, r3, r1
 800a484:	f04f 0200 	mov.w	r2, #0
 800a488:	f04f 0300 	mov.w	r3, #0
 800a48c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a490:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a494:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a498:	4690      	mov	r8, r2
 800a49a:	4699      	mov	r9, r3
 800a49c:	4623      	mov	r3, r4
 800a49e:	eb18 0303 	adds.w	r3, r8, r3
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	462b      	mov	r3, r5
 800a4a6:	eb49 0303 	adc.w	r3, r9, r3
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	f04f 0200 	mov.w	r2, #0
 800a4b0:	f04f 0300 	mov.w	r3, #0
 800a4b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	024b      	lsls	r3, r1, #9
 800a4bc:	4621      	mov	r1, r4
 800a4be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	024a      	lsls	r2, r1, #9
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a4d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4d8:	f7fd fef2 	bl	80082c0 <__aeabi_uldivmod>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4e6:	e065      	b.n	800a5b4 <HAL_RCC_GetSysClockFreq+0x420>
 800a4e8:	40023800 	.word	0x40023800
 800a4ec:	00f42400 	.word	0x00f42400
 800a4f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4f4:	4b3d      	ldr	r3, [pc, #244]	; (800a5ec <HAL_RCC_GetSysClockFreq+0x458>)
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	099b      	lsrs	r3, r3, #6
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	4611      	mov	r1, r2
 800a500:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a504:	653b      	str	r3, [r7, #80]	; 0x50
 800a506:	2300      	movs	r3, #0
 800a508:	657b      	str	r3, [r7, #84]	; 0x54
 800a50a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800a50e:	4642      	mov	r2, r8
 800a510:	464b      	mov	r3, r9
 800a512:	f04f 0000 	mov.w	r0, #0
 800a516:	f04f 0100 	mov.w	r1, #0
 800a51a:	0159      	lsls	r1, r3, #5
 800a51c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a520:	0150      	lsls	r0, r2, #5
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4641      	mov	r1, r8
 800a528:	1a51      	subs	r1, r2, r1
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	4649      	mov	r1, r9
 800a52e:	eb63 0301 	sbc.w	r3, r3, r1
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	f04f 0200 	mov.w	r2, #0
 800a538:	f04f 0300 	mov.w	r3, #0
 800a53c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a540:	4659      	mov	r1, fp
 800a542:	018b      	lsls	r3, r1, #6
 800a544:	4651      	mov	r1, sl
 800a546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a54a:	4651      	mov	r1, sl
 800a54c:	018a      	lsls	r2, r1, #6
 800a54e:	4651      	mov	r1, sl
 800a550:	1a54      	subs	r4, r2, r1
 800a552:	4659      	mov	r1, fp
 800a554:	eb63 0501 	sbc.w	r5, r3, r1
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	00eb      	lsls	r3, r5, #3
 800a562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a566:	00e2      	lsls	r2, r4, #3
 800a568:	4614      	mov	r4, r2
 800a56a:	461d      	mov	r5, r3
 800a56c:	4643      	mov	r3, r8
 800a56e:	18e3      	adds	r3, r4, r3
 800a570:	603b      	str	r3, [r7, #0]
 800a572:	464b      	mov	r3, r9
 800a574:	eb45 0303 	adc.w	r3, r5, r3
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a586:	4629      	mov	r1, r5
 800a588:	028b      	lsls	r3, r1, #10
 800a58a:	4621      	mov	r1, r4
 800a58c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a590:	4621      	mov	r1, r4
 800a592:	028a      	lsls	r2, r1, #10
 800a594:	4610      	mov	r0, r2
 800a596:	4619      	mov	r1, r3
 800a598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a59c:	2200      	movs	r2, #0
 800a59e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a5a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a5a6:	f7fd fe8b 	bl	80082c0 <__aeabi_uldivmod>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <HAL_RCC_GetSysClockFreq+0x458>)
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	0f1b      	lsrs	r3, r3, #28
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 800a5c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a5d2:	e003      	b.n	800a5dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a5d4:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a5d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a5da:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a5dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	37b8      	adds	r7, #184	; 0xb8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5ea:	bf00      	nop
 800a5ec:	40023800 	.word	0x40023800
 800a5f0:	00f42400 	.word	0x00f42400

0800a5f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e28d      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 8083 	beq.w	800a71a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a614:	4b94      	ldr	r3, [pc, #592]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f003 030c 	and.w	r3, r3, #12
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	d019      	beq.n	800a654 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a620:	4b91      	ldr	r3, [pc, #580]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f003 030c 	and.w	r3, r3, #12
        || \
 800a628:	2b08      	cmp	r3, #8
 800a62a:	d106      	bne.n	800a63a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a62c:	4b8e      	ldr	r3, [pc, #568]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a638:	d00c      	beq.n	800a654 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a63a:	4b8b      	ldr	r3, [pc, #556]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a642:	2b0c      	cmp	r3, #12
 800a644:	d112      	bne.n	800a66c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a646:	4b88      	ldr	r3, [pc, #544]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a64e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a652:	d10b      	bne.n	800a66c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a654:	4b84      	ldr	r3, [pc, #528]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d05b      	beq.n	800a718 <HAL_RCC_OscConfig+0x124>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d157      	bne.n	800a718 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e25a      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a674:	d106      	bne.n	800a684 <HAL_RCC_OscConfig+0x90>
 800a676:	4b7c      	ldr	r3, [pc, #496]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a7b      	ldr	r2, [pc, #492]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a67c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	e01d      	b.n	800a6c0 <HAL_RCC_OscConfig+0xcc>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a68c:	d10c      	bne.n	800a6a8 <HAL_RCC_OscConfig+0xb4>
 800a68e:	4b76      	ldr	r3, [pc, #472]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a75      	ldr	r2, [pc, #468]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	4b73      	ldr	r3, [pc, #460]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a72      	ldr	r2, [pc, #456]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a6a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	e00b      	b.n	800a6c0 <HAL_RCC_OscConfig+0xcc>
 800a6a8:	4b6f      	ldr	r3, [pc, #444]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a6e      	ldr	r2, [pc, #440]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a6ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	4b6c      	ldr	r3, [pc, #432]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a6b      	ldr	r2, [pc, #428]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a6ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d013      	beq.n	800a6f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c8:	f7fe fe64 	bl	8009394 <HAL_GetTick>
 800a6cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6d0:	f7fe fe60 	bl	8009394 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b64      	cmp	r3, #100	; 0x64
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e21f      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6e2:	4b61      	ldr	r3, [pc, #388]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0f0      	beq.n	800a6d0 <HAL_RCC_OscConfig+0xdc>
 800a6ee:	e014      	b.n	800a71a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6f0:	f7fe fe50 	bl	8009394 <HAL_GetTick>
 800a6f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6f6:	e008      	b.n	800a70a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6f8:	f7fe fe4c 	bl	8009394 <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	2b64      	cmp	r3, #100	; 0x64
 800a704:	d901      	bls.n	800a70a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e20b      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a70a:	4b57      	ldr	r3, [pc, #348]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f0      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x104>
 800a716:	e000      	b.n	800a71a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d06f      	beq.n	800a806 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a726:	4b50      	ldr	r3, [pc, #320]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f003 030c 	and.w	r3, r3, #12
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d017      	beq.n	800a762 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a732:	4b4d      	ldr	r3, [pc, #308]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f003 030c 	and.w	r3, r3, #12
        || \
 800a73a:	2b08      	cmp	r3, #8
 800a73c:	d105      	bne.n	800a74a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a73e:	4b4a      	ldr	r3, [pc, #296]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00b      	beq.n	800a762 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a74a:	4b47      	ldr	r3, [pc, #284]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a752:	2b0c      	cmp	r3, #12
 800a754:	d11c      	bne.n	800a790 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a756:	4b44      	ldr	r3, [pc, #272]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d116      	bne.n	800a790 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a762:	4b41      	ldr	r3, [pc, #260]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0302 	and.w	r3, r3, #2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d005      	beq.n	800a77a <HAL_RCC_OscConfig+0x186>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d001      	beq.n	800a77a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e1d3      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a77a:	4b3b      	ldr	r3, [pc, #236]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	4937      	ldr	r1, [pc, #220]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a78e:	e03a      	b.n	800a806 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d020      	beq.n	800a7da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a798:	4b34      	ldr	r3, [pc, #208]	; (800a86c <HAL_RCC_OscConfig+0x278>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79e:	f7fe fdf9 	bl	8009394 <HAL_GetTick>
 800a7a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7a4:	e008      	b.n	800a7b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7a6:	f7fe fdf5 	bl	8009394 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d901      	bls.n	800a7b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e1b4      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7b8:	4b2b      	ldr	r3, [pc, #172]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0302 	and.w	r3, r3, #2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0f0      	beq.n	800a7a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7c4:	4b28      	ldr	r3, [pc, #160]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	4925      	ldr	r1, [pc, #148]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	600b      	str	r3, [r1, #0]
 800a7d8:	e015      	b.n	800a806 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7da:	4b24      	ldr	r3, [pc, #144]	; (800a86c <HAL_RCC_OscConfig+0x278>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e0:	f7fe fdd8 	bl	8009394 <HAL_GetTick>
 800a7e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7e6:	e008      	b.n	800a7fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7e8:	f7fe fdd4 	bl	8009394 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d901      	bls.n	800a7fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e193      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7fa:	4b1b      	ldr	r3, [pc, #108]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f0      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0308 	and.w	r3, r3, #8
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d036      	beq.n	800a880 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d016      	beq.n	800a848 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a81a:	4b15      	ldr	r3, [pc, #84]	; (800a870 <HAL_RCC_OscConfig+0x27c>)
 800a81c:	2201      	movs	r2, #1
 800a81e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a820:	f7fe fdb8 	bl	8009394 <HAL_GetTick>
 800a824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a826:	e008      	b.n	800a83a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a828:	f7fe fdb4 	bl	8009394 <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	2b02      	cmp	r3, #2
 800a834:	d901      	bls.n	800a83a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a836:	2303      	movs	r3, #3
 800a838:	e173      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <HAL_RCC_OscConfig+0x274>)
 800a83c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a83e:	f003 0302 	and.w	r3, r3, #2
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0f0      	beq.n	800a828 <HAL_RCC_OscConfig+0x234>
 800a846:	e01b      	b.n	800a880 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a848:	4b09      	ldr	r3, [pc, #36]	; (800a870 <HAL_RCC_OscConfig+0x27c>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a84e:	f7fe fda1 	bl	8009394 <HAL_GetTick>
 800a852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a854:	e00e      	b.n	800a874 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a856:	f7fe fd9d 	bl	8009394 <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	2b02      	cmp	r3, #2
 800a862:	d907      	bls.n	800a874 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e15c      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
 800a868:	40023800 	.word	0x40023800
 800a86c:	42470000 	.word	0x42470000
 800a870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a874:	4b8a      	ldr	r3, [pc, #552]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a878:	f003 0302 	and.w	r3, r3, #2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1ea      	bne.n	800a856 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 8097 	beq.w	800a9bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a892:	4b83      	ldr	r3, [pc, #524]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10f      	bne.n	800a8be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]
 800a8a2:	4b7f      	ldr	r3, [pc, #508]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a6:	4a7e      	ldr	r2, [pc, #504]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a8a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a8ae:	4b7c      	ldr	r3, [pc, #496]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8b6:	60bb      	str	r3, [r7, #8]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8be:	4b79      	ldr	r3, [pc, #484]	; (800aaa4 <HAL_RCC_OscConfig+0x4b0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d118      	bne.n	800a8fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8ca:	4b76      	ldr	r3, [pc, #472]	; (800aaa4 <HAL_RCC_OscConfig+0x4b0>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a75      	ldr	r2, [pc, #468]	; (800aaa4 <HAL_RCC_OscConfig+0x4b0>)
 800a8d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8d6:	f7fe fd5d 	bl	8009394 <HAL_GetTick>
 800a8da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8dc:	e008      	b.n	800a8f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8de:	f7fe fd59 	bl	8009394 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e118      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8f0:	4b6c      	ldr	r3, [pc, #432]	; (800aaa4 <HAL_RCC_OscConfig+0x4b0>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0f0      	beq.n	800a8de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d106      	bne.n	800a912 <HAL_RCC_OscConfig+0x31e>
 800a904:	4b66      	ldr	r3, [pc, #408]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a908:	4a65      	ldr	r2, [pc, #404]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a90a:	f043 0301 	orr.w	r3, r3, #1
 800a90e:	6713      	str	r3, [r2, #112]	; 0x70
 800a910:	e01c      	b.n	800a94c <HAL_RCC_OscConfig+0x358>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	2b05      	cmp	r3, #5
 800a918:	d10c      	bne.n	800a934 <HAL_RCC_OscConfig+0x340>
 800a91a:	4b61      	ldr	r3, [pc, #388]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91e:	4a60      	ldr	r2, [pc, #384]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a920:	f043 0304 	orr.w	r3, r3, #4
 800a924:	6713      	str	r3, [r2, #112]	; 0x70
 800a926:	4b5e      	ldr	r3, [pc, #376]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92a:	4a5d      	ldr	r2, [pc, #372]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a92c:	f043 0301 	orr.w	r3, r3, #1
 800a930:	6713      	str	r3, [r2, #112]	; 0x70
 800a932:	e00b      	b.n	800a94c <HAL_RCC_OscConfig+0x358>
 800a934:	4b5a      	ldr	r3, [pc, #360]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a938:	4a59      	ldr	r2, [pc, #356]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a93a:	f023 0301 	bic.w	r3, r3, #1
 800a93e:	6713      	str	r3, [r2, #112]	; 0x70
 800a940:	4b57      	ldr	r3, [pc, #348]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a944:	4a56      	ldr	r2, [pc, #344]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a946:	f023 0304 	bic.w	r3, r3, #4
 800a94a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d015      	beq.n	800a980 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a954:	f7fe fd1e 	bl	8009394 <HAL_GetTick>
 800a958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a95a:	e00a      	b.n	800a972 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a95c:	f7fe fd1a 	bl	8009394 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	f241 3288 	movw	r2, #5000	; 0x1388
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d901      	bls.n	800a972 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e0d7      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a972:	4b4b      	ldr	r3, [pc, #300]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0ee      	beq.n	800a95c <HAL_RCC_OscConfig+0x368>
 800a97e:	e014      	b.n	800a9aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a980:	f7fe fd08 	bl	8009394 <HAL_GetTick>
 800a984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a986:	e00a      	b.n	800a99e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a988:	f7fe fd04 	bl	8009394 <HAL_GetTick>
 800a98c:	4602      	mov	r2, r0
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	f241 3288 	movw	r2, #5000	; 0x1388
 800a996:	4293      	cmp	r3, r2
 800a998:	d901      	bls.n	800a99e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e0c1      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a99e:	4b40      	ldr	r3, [pc, #256]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1ee      	bne.n	800a988 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d105      	bne.n	800a9bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9b0:	4b3b      	ldr	r3, [pc, #236]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b4:	4a3a      	ldr	r2, [pc, #232]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a9b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 80ad 	beq.w	800ab20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a9c6:	4b36      	ldr	r3, [pc, #216]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f003 030c 	and.w	r3, r3, #12
 800a9ce:	2b08      	cmp	r3, #8
 800a9d0:	d060      	beq.n	800aa94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d145      	bne.n	800aa66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9da:	4b33      	ldr	r3, [pc, #204]	; (800aaa8 <HAL_RCC_OscConfig+0x4b4>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7fe fcd8 	bl	8009394 <HAL_GetTick>
 800a9e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9e8:	f7fe fcd4 	bl	8009394 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e093      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9fa:	4b29      	ldr	r3, [pc, #164]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1f0      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	69da      	ldr	r2, [r3, #28]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	019b      	lsls	r3, r3, #6
 800aa16:	431a      	orrs	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1c:	085b      	lsrs	r3, r3, #1
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	431a      	orrs	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	061b      	lsls	r3, r3, #24
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa30:	071b      	lsls	r3, r3, #28
 800aa32:	491b      	ldr	r1, [pc, #108]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa38:	4b1b      	ldr	r3, [pc, #108]	; (800aaa8 <HAL_RCC_OscConfig+0x4b4>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3e:	f7fe fca9 	bl	8009394 <HAL_GetTick>
 800aa42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa44:	e008      	b.n	800aa58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa46:	f7fe fca5 	bl	8009394 <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d901      	bls.n	800aa58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e064      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa58:	4b11      	ldr	r3, [pc, #68]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f0      	beq.n	800aa46 <HAL_RCC_OscConfig+0x452>
 800aa64:	e05c      	b.n	800ab20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa66:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <HAL_RCC_OscConfig+0x4b4>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa6c:	f7fe fc92 	bl	8009394 <HAL_GetTick>
 800aa70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa72:	e008      	b.n	800aa86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa74:	f7fe fc8e 	bl	8009394 <HAL_GetTick>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d901      	bls.n	800aa86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e04d      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa86:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <HAL_RCC_OscConfig+0x4ac>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1f0      	bne.n	800aa74 <HAL_RCC_OscConfig+0x480>
 800aa92:	e045      	b.n	800ab20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d107      	bne.n	800aaac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e040      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
 800aaa0:	40023800 	.word	0x40023800
 800aaa4:	40007000 	.word	0x40007000
 800aaa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aaac:	4b1f      	ldr	r3, [pc, #124]	; (800ab2c <HAL_RCC_OscConfig+0x538>)
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d030      	beq.n	800ab1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d129      	bne.n	800ab1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d122      	bne.n	800ab1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aadc:	4013      	ands	r3, r2
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d119      	bne.n	800ab1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf2:	085b      	lsrs	r3, r3, #1
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d10f      	bne.n	800ab1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d107      	bne.n	800ab1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d001      	beq.n	800ab20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e000      	b.n	800ab22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	40023800 	.word	0x40023800

0800ab30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e042      	b.n	800abc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fe fa9c 	bl	8009094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2224      	movs	r2, #36	; 0x24
 800ab60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fa09 	bl	800af8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	691a      	ldr	r2, [r3, #16]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	695a      	ldr	r2, [r3, #20]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2220      	movs	r2, #32
 800abb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2220      	movs	r2, #32
 800abbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08a      	sub	sp, #40	; 0x28
 800abd4:	af02      	add	r7, sp, #8
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	603b      	str	r3, [r7, #0]
 800abdc:	4613      	mov	r3, r2
 800abde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b20      	cmp	r3, #32
 800abee:	d175      	bne.n	800acdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <HAL_UART_Transmit+0x2c>
 800abf6:	88fb      	ldrh	r3, [r7, #6]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e06e      	b.n	800acde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2221      	movs	r2, #33	; 0x21
 800ac0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac0e:	f7fe fbc1 	bl	8009394 <HAL_GetTick>
 800ac12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	88fa      	ldrh	r2, [r7, #6]
 800ac18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	88fa      	ldrh	r2, [r7, #6]
 800ac1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac28:	d108      	bne.n	800ac3c <HAL_UART_Transmit+0x6c>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d104      	bne.n	800ac3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	e003      	b.n	800ac44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac44:	e02e      	b.n	800aca4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2180      	movs	r1, #128	; 0x80
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f8df 	bl	800ae14 <UART_WaitOnFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d005      	beq.n	800ac68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2220      	movs	r2, #32
 800ac60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e03a      	b.n	800acde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10b      	bne.n	800ac86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	3302      	adds	r3, #2
 800ac82:	61bb      	str	r3, [r7, #24]
 800ac84:	e007      	b.n	800ac96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	781a      	ldrb	r2, [r3, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	3301      	adds	r3, #1
 800ac94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1cb      	bne.n	800ac46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2200      	movs	r2, #0
 800acb6:	2140      	movs	r1, #64	; 0x40
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f000 f8ab 	bl	800ae14 <UART_WaitOnFlagUntilTimeout>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2220      	movs	r2, #32
 800acc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e006      	b.n	800acde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2220      	movs	r2, #32
 800acd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	e000      	b.n	800acde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800acdc:	2302      	movs	r3, #2
  }
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b08a      	sub	sp, #40	; 0x28
 800acea:	af02      	add	r7, sp, #8
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	603b      	str	r3, [r7, #0]
 800acf2:	4613      	mov	r3, r2
 800acf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	f040 8081 	bne.w	800ae0a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <HAL_UART_Receive+0x2e>
 800ad0e:	88fb      	ldrh	r3, [r7, #6]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e079      	b.n	800ae0c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2222      	movs	r2, #34	; 0x22
 800ad22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad2c:	f7fe fb32 	bl	8009394 <HAL_GetTick>
 800ad30:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	88fa      	ldrh	r2, [r7, #6]
 800ad36:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	88fa      	ldrh	r2, [r7, #6]
 800ad3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad46:	d108      	bne.n	800ad5a <HAL_UART_Receive+0x74>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	61bb      	str	r3, [r7, #24]
 800ad58:	e003      	b.n	800ad62 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ad62:	e047      	b.n	800adf4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2120      	movs	r1, #32
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 f850 	bl	800ae14 <UART_WaitOnFlagUntilTimeout>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d005      	beq.n	800ad86 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e042      	b.n	800ae0c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10c      	bne.n	800ada6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	3302      	adds	r3, #2
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	e01f      	b.n	800ade6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adae:	d007      	beq.n	800adc0 <HAL_UART_Receive+0xda>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10a      	bne.n	800adce <HAL_UART_Receive+0xe8>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	701a      	strb	r2, [r3, #0]
 800adcc:	e008      	b.n	800ade0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adda:	b2da      	uxtb	r2, r3
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	3301      	adds	r3, #1
 800ade4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adea:	b29b      	uxth	r3, r3
 800adec:	3b01      	subs	r3, #1
 800adee:	b29a      	uxth	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1b2      	bne.n	800ad64 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	e000      	b.n	800ae0c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ae0a:	2302      	movs	r3, #2
  }
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	4613      	mov	r3, r2
 800ae22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae24:	e03b      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2c:	d037      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae2e:	f7fe fab1 	bl	8009394 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	6a3a      	ldr	r2, [r7, #32]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d302      	bcc.n	800ae44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e03a      	b.n	800aebe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	f003 0304 	and.w	r3, r3, #4
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d023      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x8a>
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b80      	cmp	r3, #128	; 0x80
 800ae5a:	d020      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x8a>
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2b40      	cmp	r3, #64	; 0x40
 800ae60:	d01d      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d116      	bne.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ae70:	2300      	movs	r3, #0
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	617b      	str	r3, [r7, #20]
 800ae84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 f81d 	bl	800aec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2208      	movs	r2, #8
 800ae90:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e00f      	b.n	800aebe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	4013      	ands	r3, r2
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	bf0c      	ite	eq
 800aeae:	2301      	moveq	r3, #1
 800aeb0:	2300      	movne	r3, #0
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d0b4      	beq.n	800ae26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b095      	sub	sp, #84	; 0x54
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	330c      	adds	r3, #12
 800aed4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed8:	e853 3f00 	ldrex	r3, [r3]
 800aedc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	330c      	adds	r3, #12
 800aeec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aeee:	643a      	str	r2, [r7, #64]	; 0x40
 800aef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e5      	bne.n	800aece <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3314      	adds	r3, #20
 800af08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	61fb      	str	r3, [r7, #28]
   return(result);
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	f023 0301 	bic.w	r3, r3, #1
 800af18:	64bb      	str	r3, [r7, #72]	; 0x48
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3314      	adds	r3, #20
 800af20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af22:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af2a:	e841 2300 	strex	r3, r2, [r1]
 800af2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1e5      	bne.n	800af02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d119      	bne.n	800af72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	330c      	adds	r3, #12
 800af44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	e853 3f00 	ldrex	r3, [r3]
 800af4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	f023 0310 	bic.w	r3, r3, #16
 800af54:	647b      	str	r3, [r7, #68]	; 0x44
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	330c      	adds	r3, #12
 800af5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af5e:	61ba      	str	r2, [r7, #24]
 800af60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	6979      	ldr	r1, [r7, #20]
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	e841 2300 	strex	r3, r2, [r1]
 800af6a:	613b      	str	r3, [r7, #16]
   return(result);
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1e5      	bne.n	800af3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2220      	movs	r2, #32
 800af76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800af80:	bf00      	nop
 800af82:	3754      	adds	r7, #84	; 0x54
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af90:	b0c0      	sub	sp, #256	; 0x100
 800af92:	af00      	add	r7, sp, #0
 800af94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800afa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa8:	68d9      	ldr	r1, [r3, #12]
 800afaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	ea40 0301 	orr.w	r3, r0, r1
 800afb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	431a      	orrs	r2, r3
 800afc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	431a      	orrs	r2, r3
 800afcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800afe4:	f021 010c 	bic.w	r1, r1, #12
 800afe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aff2:	430b      	orrs	r3, r1
 800aff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b006:	6999      	ldr	r1, [r3, #24]
 800b008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	ea40 0301 	orr.w	r3, r0, r1
 800b012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	4b8f      	ldr	r3, [pc, #572]	; (800b258 <UART_SetConfig+0x2cc>)
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d005      	beq.n	800b02c <UART_SetConfig+0xa0>
 800b020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	4b8d      	ldr	r3, [pc, #564]	; (800b25c <UART_SetConfig+0x2d0>)
 800b028:	429a      	cmp	r2, r3
 800b02a:	d104      	bne.n	800b036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b02c:	f7ff f89e 	bl	800a16c <HAL_RCC_GetPCLK2Freq>
 800b030:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b034:	e003      	b.n	800b03e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b036:	f7ff f885 	bl	800a144 <HAL_RCC_GetPCLK1Freq>
 800b03a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b048:	f040 810c 	bne.w	800b264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b04c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b050:	2200      	movs	r2, #0
 800b052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b056:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b05a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b05e:	4622      	mov	r2, r4
 800b060:	462b      	mov	r3, r5
 800b062:	1891      	adds	r1, r2, r2
 800b064:	65b9      	str	r1, [r7, #88]	; 0x58
 800b066:	415b      	adcs	r3, r3
 800b068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b06a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b06e:	4621      	mov	r1, r4
 800b070:	eb12 0801 	adds.w	r8, r2, r1
 800b074:	4629      	mov	r1, r5
 800b076:	eb43 0901 	adc.w	r9, r3, r1
 800b07a:	f04f 0200 	mov.w	r2, #0
 800b07e:	f04f 0300 	mov.w	r3, #0
 800b082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b08a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b08e:	4690      	mov	r8, r2
 800b090:	4699      	mov	r9, r3
 800b092:	4623      	mov	r3, r4
 800b094:	eb18 0303 	adds.w	r3, r8, r3
 800b098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b09c:	462b      	mov	r3, r5
 800b09e:	eb49 0303 	adc.w	r3, r9, r3
 800b0a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b0b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	18db      	adds	r3, r3, r3
 800b0be:	653b      	str	r3, [r7, #80]	; 0x50
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	eb42 0303 	adc.w	r3, r2, r3
 800b0c6:	657b      	str	r3, [r7, #84]	; 0x54
 800b0c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b0cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b0d0:	f7fd f8f6 	bl	80082c0 <__aeabi_uldivmod>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4b61      	ldr	r3, [pc, #388]	; (800b260 <UART_SetConfig+0x2d4>)
 800b0da:	fba3 2302 	umull	r2, r3, r3, r2
 800b0de:	095b      	lsrs	r3, r3, #5
 800b0e0:	011c      	lsls	r4, r3, #4
 800b0e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b0f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	464b      	mov	r3, r9
 800b0f8:	1891      	adds	r1, r2, r2
 800b0fa:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0fc:	415b      	adcs	r3, r3
 800b0fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b104:	4641      	mov	r1, r8
 800b106:	eb12 0a01 	adds.w	sl, r2, r1
 800b10a:	4649      	mov	r1, r9
 800b10c:	eb43 0b01 	adc.w	fp, r3, r1
 800b110:	f04f 0200 	mov.w	r2, #0
 800b114:	f04f 0300 	mov.w	r3, #0
 800b118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b11c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b124:	4692      	mov	sl, r2
 800b126:	469b      	mov	fp, r3
 800b128:	4643      	mov	r3, r8
 800b12a:	eb1a 0303 	adds.w	r3, sl, r3
 800b12e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b132:	464b      	mov	r3, r9
 800b134:	eb4b 0303 	adc.w	r3, fp, r3
 800b138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b148:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b14c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b150:	460b      	mov	r3, r1
 800b152:	18db      	adds	r3, r3, r3
 800b154:	643b      	str	r3, [r7, #64]	; 0x40
 800b156:	4613      	mov	r3, r2
 800b158:	eb42 0303 	adc.w	r3, r2, r3
 800b15c:	647b      	str	r3, [r7, #68]	; 0x44
 800b15e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b166:	f7fd f8ab 	bl	80082c0 <__aeabi_uldivmod>
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4611      	mov	r1, r2
 800b170:	4b3b      	ldr	r3, [pc, #236]	; (800b260 <UART_SetConfig+0x2d4>)
 800b172:	fba3 2301 	umull	r2, r3, r3, r1
 800b176:	095b      	lsrs	r3, r3, #5
 800b178:	2264      	movs	r2, #100	; 0x64
 800b17a:	fb02 f303 	mul.w	r3, r2, r3
 800b17e:	1acb      	subs	r3, r1, r3
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b186:	4b36      	ldr	r3, [pc, #216]	; (800b260 <UART_SetConfig+0x2d4>)
 800b188:	fba3 2302 	umull	r2, r3, r3, r2
 800b18c:	095b      	lsrs	r3, r3, #5
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b194:	441c      	add	r4, r3
 800b196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b19a:	2200      	movs	r2, #0
 800b19c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b1a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	464b      	mov	r3, r9
 800b1ac:	1891      	adds	r1, r2, r2
 800b1ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800b1b0:	415b      	adcs	r3, r3
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	1851      	adds	r1, r2, r1
 800b1bc:	6339      	str	r1, [r7, #48]	; 0x30
 800b1be:	4649      	mov	r1, r9
 800b1c0:	414b      	adcs	r3, r1
 800b1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c4:	f04f 0200 	mov.w	r2, #0
 800b1c8:	f04f 0300 	mov.w	r3, #0
 800b1cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	00cb      	lsls	r3, r1, #3
 800b1d4:	4651      	mov	r1, sl
 800b1d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1da:	4651      	mov	r1, sl
 800b1dc:	00ca      	lsls	r2, r1, #3
 800b1de:	4610      	mov	r0, r2
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	189b      	adds	r3, r3, r2
 800b1e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1ec:	464b      	mov	r3, r9
 800b1ee:	460a      	mov	r2, r1
 800b1f0:	eb42 0303 	adc.w	r3, r2, r3
 800b1f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b204:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b20c:	460b      	mov	r3, r1
 800b20e:	18db      	adds	r3, r3, r3
 800b210:	62bb      	str	r3, [r7, #40]	; 0x28
 800b212:	4613      	mov	r3, r2
 800b214:	eb42 0303 	adc.w	r3, r2, r3
 800b218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b21a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b21e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b222:	f7fd f84d 	bl	80082c0 <__aeabi_uldivmod>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	4b0d      	ldr	r3, [pc, #52]	; (800b260 <UART_SetConfig+0x2d4>)
 800b22c:	fba3 1302 	umull	r1, r3, r3, r2
 800b230:	095b      	lsrs	r3, r3, #5
 800b232:	2164      	movs	r1, #100	; 0x64
 800b234:	fb01 f303 	mul.w	r3, r1, r3
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	3332      	adds	r3, #50	; 0x32
 800b23e:	4a08      	ldr	r2, [pc, #32]	; (800b260 <UART_SetConfig+0x2d4>)
 800b240:	fba2 2303 	umull	r2, r3, r2, r3
 800b244:	095b      	lsrs	r3, r3, #5
 800b246:	f003 0207 	and.w	r2, r3, #7
 800b24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4422      	add	r2, r4
 800b252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b254:	e106      	b.n	800b464 <UART_SetConfig+0x4d8>
 800b256:	bf00      	nop
 800b258:	40011000 	.word	0x40011000
 800b25c:	40011400 	.word	0x40011400
 800b260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b268:	2200      	movs	r2, #0
 800b26a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b26e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b276:	4642      	mov	r2, r8
 800b278:	464b      	mov	r3, r9
 800b27a:	1891      	adds	r1, r2, r2
 800b27c:	6239      	str	r1, [r7, #32]
 800b27e:	415b      	adcs	r3, r3
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
 800b282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b286:	4641      	mov	r1, r8
 800b288:	1854      	adds	r4, r2, r1
 800b28a:	4649      	mov	r1, r9
 800b28c:	eb43 0501 	adc.w	r5, r3, r1
 800b290:	f04f 0200 	mov.w	r2, #0
 800b294:	f04f 0300 	mov.w	r3, #0
 800b298:	00eb      	lsls	r3, r5, #3
 800b29a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b29e:	00e2      	lsls	r2, r4, #3
 800b2a0:	4614      	mov	r4, r2
 800b2a2:	461d      	mov	r5, r3
 800b2a4:	4643      	mov	r3, r8
 800b2a6:	18e3      	adds	r3, r4, r3
 800b2a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b2ac:	464b      	mov	r3, r9
 800b2ae:	eb45 0303 	adc.w	r3, r5, r3
 800b2b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b2c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2c6:	f04f 0200 	mov.w	r2, #0
 800b2ca:	f04f 0300 	mov.w	r3, #0
 800b2ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	008b      	lsls	r3, r1, #2
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2dc:	4621      	mov	r1, r4
 800b2de:	008a      	lsls	r2, r1, #2
 800b2e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b2e4:	f7fc ffec 	bl	80082c0 <__aeabi_uldivmod>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4b60      	ldr	r3, [pc, #384]	; (800b470 <UART_SetConfig+0x4e4>)
 800b2ee:	fba3 2302 	umull	r2, r3, r3, r2
 800b2f2:	095b      	lsrs	r3, r3, #5
 800b2f4:	011c      	lsls	r4, r3, #4
 800b2f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b300:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	1891      	adds	r1, r2, r2
 800b30e:	61b9      	str	r1, [r7, #24]
 800b310:	415b      	adcs	r3, r3
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b318:	4641      	mov	r1, r8
 800b31a:	1851      	adds	r1, r2, r1
 800b31c:	6139      	str	r1, [r7, #16]
 800b31e:	4649      	mov	r1, r9
 800b320:	414b      	adcs	r3, r1
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	f04f 0200 	mov.w	r2, #0
 800b328:	f04f 0300 	mov.w	r3, #0
 800b32c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b330:	4659      	mov	r1, fp
 800b332:	00cb      	lsls	r3, r1, #3
 800b334:	4651      	mov	r1, sl
 800b336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b33a:	4651      	mov	r1, sl
 800b33c:	00ca      	lsls	r2, r1, #3
 800b33e:	4610      	mov	r0, r2
 800b340:	4619      	mov	r1, r3
 800b342:	4603      	mov	r3, r0
 800b344:	4642      	mov	r2, r8
 800b346:	189b      	adds	r3, r3, r2
 800b348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b34c:	464b      	mov	r3, r9
 800b34e:	460a      	mov	r2, r1
 800b350:	eb42 0303 	adc.w	r3, r2, r3
 800b354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	67bb      	str	r3, [r7, #120]	; 0x78
 800b362:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	f04f 0300 	mov.w	r3, #0
 800b36c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b370:	4649      	mov	r1, r9
 800b372:	008b      	lsls	r3, r1, #2
 800b374:	4641      	mov	r1, r8
 800b376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b37a:	4641      	mov	r1, r8
 800b37c:	008a      	lsls	r2, r1, #2
 800b37e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b382:	f7fc ff9d 	bl	80082c0 <__aeabi_uldivmod>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	4b38      	ldr	r3, [pc, #224]	; (800b470 <UART_SetConfig+0x4e4>)
 800b38e:	fba3 2301 	umull	r2, r3, r3, r1
 800b392:	095b      	lsrs	r3, r3, #5
 800b394:	2264      	movs	r2, #100	; 0x64
 800b396:	fb02 f303 	mul.w	r3, r2, r3
 800b39a:	1acb      	subs	r3, r1, r3
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	3332      	adds	r3, #50	; 0x32
 800b3a0:	4a33      	ldr	r2, [pc, #204]	; (800b470 <UART_SetConfig+0x4e4>)
 800b3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a6:	095b      	lsrs	r3, r3, #5
 800b3a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3ac:	441c      	add	r4, r3
 800b3ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	673b      	str	r3, [r7, #112]	; 0x70
 800b3b6:	677a      	str	r2, [r7, #116]	; 0x74
 800b3b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b3bc:	4642      	mov	r2, r8
 800b3be:	464b      	mov	r3, r9
 800b3c0:	1891      	adds	r1, r2, r2
 800b3c2:	60b9      	str	r1, [r7, #8]
 800b3c4:	415b      	adcs	r3, r3
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3cc:	4641      	mov	r1, r8
 800b3ce:	1851      	adds	r1, r2, r1
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	4649      	mov	r1, r9
 800b3d4:	414b      	adcs	r3, r1
 800b3d6:	607b      	str	r3, [r7, #4]
 800b3d8:	f04f 0200 	mov.w	r2, #0
 800b3dc:	f04f 0300 	mov.w	r3, #0
 800b3e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3e4:	4659      	mov	r1, fp
 800b3e6:	00cb      	lsls	r3, r1, #3
 800b3e8:	4651      	mov	r1, sl
 800b3ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3ee:	4651      	mov	r1, sl
 800b3f0:	00ca      	lsls	r2, r1, #3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	189b      	adds	r3, r3, r2
 800b3fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3fe:	464b      	mov	r3, r9
 800b400:	460a      	mov	r2, r1
 800b402:	eb42 0303 	adc.w	r3, r2, r3
 800b406:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	663b      	str	r3, [r7, #96]	; 0x60
 800b412:	667a      	str	r2, [r7, #100]	; 0x64
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b420:	4649      	mov	r1, r9
 800b422:	008b      	lsls	r3, r1, #2
 800b424:	4641      	mov	r1, r8
 800b426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b42a:	4641      	mov	r1, r8
 800b42c:	008a      	lsls	r2, r1, #2
 800b42e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b432:	f7fc ff45 	bl	80082c0 <__aeabi_uldivmod>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <UART_SetConfig+0x4e4>)
 800b43c:	fba3 1302 	umull	r1, r3, r3, r2
 800b440:	095b      	lsrs	r3, r3, #5
 800b442:	2164      	movs	r1, #100	; 0x64
 800b444:	fb01 f303 	mul.w	r3, r1, r3
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	011b      	lsls	r3, r3, #4
 800b44c:	3332      	adds	r3, #50	; 0x32
 800b44e:	4a08      	ldr	r2, [pc, #32]	; (800b470 <UART_SetConfig+0x4e4>)
 800b450:	fba2 2303 	umull	r2, r3, r2, r3
 800b454:	095b      	lsrs	r3, r3, #5
 800b456:	f003 020f 	and.w	r2, r3, #15
 800b45a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4422      	add	r2, r4
 800b462:	609a      	str	r2, [r3, #8]
}
 800b464:	bf00      	nop
 800b466:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b46a:	46bd      	mov	sp, r7
 800b46c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b470:	51eb851f 	.word	0x51eb851f

0800b474 <_vsiprintf_r>:
 800b474:	b500      	push	{lr}
 800b476:	b09b      	sub	sp, #108	; 0x6c
 800b478:	9100      	str	r1, [sp, #0]
 800b47a:	9104      	str	r1, [sp, #16]
 800b47c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b480:	9105      	str	r1, [sp, #20]
 800b482:	9102      	str	r1, [sp, #8]
 800b484:	4905      	ldr	r1, [pc, #20]	; (800b49c <_vsiprintf_r+0x28>)
 800b486:	9103      	str	r1, [sp, #12]
 800b488:	4669      	mov	r1, sp
 800b48a:	f000 f999 	bl	800b7c0 <_svfiprintf_r>
 800b48e:	9b00      	ldr	r3, [sp, #0]
 800b490:	2200      	movs	r2, #0
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	b01b      	add	sp, #108	; 0x6c
 800b496:	f85d fb04 	ldr.w	pc, [sp], #4
 800b49a:	bf00      	nop
 800b49c:	ffff0208 	.word	0xffff0208

0800b4a0 <vsiprintf>:
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	460a      	mov	r2, r1
 800b4a4:	4601      	mov	r1, r0
 800b4a6:	4802      	ldr	r0, [pc, #8]	; (800b4b0 <vsiprintf+0x10>)
 800b4a8:	6800      	ldr	r0, [r0, #0]
 800b4aa:	f7ff bfe3 	b.w	800b474 <_vsiprintf_r>
 800b4ae:	bf00      	nop
 800b4b0:	20000060 	.word	0x20000060

0800b4b4 <memset>:
 800b4b4:	4402      	add	r2, r0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d100      	bne.n	800b4be <memset+0xa>
 800b4bc:	4770      	bx	lr
 800b4be:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c2:	e7f9      	b.n	800b4b8 <memset+0x4>

0800b4c4 <__errno>:
 800b4c4:	4b01      	ldr	r3, [pc, #4]	; (800b4cc <__errno+0x8>)
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20000060 	.word	0x20000060

0800b4d0 <__libc_init_array>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	4d0d      	ldr	r5, [pc, #52]	; (800b508 <__libc_init_array+0x38>)
 800b4d4:	4c0d      	ldr	r4, [pc, #52]	; (800b50c <__libc_init_array+0x3c>)
 800b4d6:	1b64      	subs	r4, r4, r5
 800b4d8:	10a4      	asrs	r4, r4, #2
 800b4da:	2600      	movs	r6, #0
 800b4dc:	42a6      	cmp	r6, r4
 800b4de:	d109      	bne.n	800b4f4 <__libc_init_array+0x24>
 800b4e0:	4d0b      	ldr	r5, [pc, #44]	; (800b510 <__libc_init_array+0x40>)
 800b4e2:	4c0c      	ldr	r4, [pc, #48]	; (800b514 <__libc_init_array+0x44>)
 800b4e4:	f000 fc6a 	bl	800bdbc <_init>
 800b4e8:	1b64      	subs	r4, r4, r5
 800b4ea:	10a4      	asrs	r4, r4, #2
 800b4ec:	2600      	movs	r6, #0
 800b4ee:	42a6      	cmp	r6, r4
 800b4f0:	d105      	bne.n	800b4fe <__libc_init_array+0x2e>
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4f8:	4798      	blx	r3
 800b4fa:	3601      	adds	r6, #1
 800b4fc:	e7ee      	b.n	800b4dc <__libc_init_array+0xc>
 800b4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b502:	4798      	blx	r3
 800b504:	3601      	adds	r6, #1
 800b506:	e7f2      	b.n	800b4ee <__libc_init_array+0x1e>
 800b508:	0800c1a4 	.word	0x0800c1a4
 800b50c:	0800c1a4 	.word	0x0800c1a4
 800b510:	0800c1a4 	.word	0x0800c1a4
 800b514:	0800c1a8 	.word	0x0800c1a8

0800b518 <__retarget_lock_acquire_recursive>:
 800b518:	4770      	bx	lr

0800b51a <__retarget_lock_release_recursive>:
 800b51a:	4770      	bx	lr

0800b51c <_free_r>:
 800b51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b51e:	2900      	cmp	r1, #0
 800b520:	d044      	beq.n	800b5ac <_free_r+0x90>
 800b522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b526:	9001      	str	r0, [sp, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f1a1 0404 	sub.w	r4, r1, #4
 800b52e:	bfb8      	it	lt
 800b530:	18e4      	addlt	r4, r4, r3
 800b532:	f000 f8df 	bl	800b6f4 <__malloc_lock>
 800b536:	4a1e      	ldr	r2, [pc, #120]	; (800b5b0 <_free_r+0x94>)
 800b538:	9801      	ldr	r0, [sp, #4]
 800b53a:	6813      	ldr	r3, [r2, #0]
 800b53c:	b933      	cbnz	r3, 800b54c <_free_r+0x30>
 800b53e:	6063      	str	r3, [r4, #4]
 800b540:	6014      	str	r4, [r2, #0]
 800b542:	b003      	add	sp, #12
 800b544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b548:	f000 b8da 	b.w	800b700 <__malloc_unlock>
 800b54c:	42a3      	cmp	r3, r4
 800b54e:	d908      	bls.n	800b562 <_free_r+0x46>
 800b550:	6825      	ldr	r5, [r4, #0]
 800b552:	1961      	adds	r1, r4, r5
 800b554:	428b      	cmp	r3, r1
 800b556:	bf01      	itttt	eq
 800b558:	6819      	ldreq	r1, [r3, #0]
 800b55a:	685b      	ldreq	r3, [r3, #4]
 800b55c:	1949      	addeq	r1, r1, r5
 800b55e:	6021      	streq	r1, [r4, #0]
 800b560:	e7ed      	b.n	800b53e <_free_r+0x22>
 800b562:	461a      	mov	r2, r3
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	b10b      	cbz	r3, 800b56c <_free_r+0x50>
 800b568:	42a3      	cmp	r3, r4
 800b56a:	d9fa      	bls.n	800b562 <_free_r+0x46>
 800b56c:	6811      	ldr	r1, [r2, #0]
 800b56e:	1855      	adds	r5, r2, r1
 800b570:	42a5      	cmp	r5, r4
 800b572:	d10b      	bne.n	800b58c <_free_r+0x70>
 800b574:	6824      	ldr	r4, [r4, #0]
 800b576:	4421      	add	r1, r4
 800b578:	1854      	adds	r4, r2, r1
 800b57a:	42a3      	cmp	r3, r4
 800b57c:	6011      	str	r1, [r2, #0]
 800b57e:	d1e0      	bne.n	800b542 <_free_r+0x26>
 800b580:	681c      	ldr	r4, [r3, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	6053      	str	r3, [r2, #4]
 800b586:	440c      	add	r4, r1
 800b588:	6014      	str	r4, [r2, #0]
 800b58a:	e7da      	b.n	800b542 <_free_r+0x26>
 800b58c:	d902      	bls.n	800b594 <_free_r+0x78>
 800b58e:	230c      	movs	r3, #12
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	e7d6      	b.n	800b542 <_free_r+0x26>
 800b594:	6825      	ldr	r5, [r4, #0]
 800b596:	1961      	adds	r1, r4, r5
 800b598:	428b      	cmp	r3, r1
 800b59a:	bf04      	itt	eq
 800b59c:	6819      	ldreq	r1, [r3, #0]
 800b59e:	685b      	ldreq	r3, [r3, #4]
 800b5a0:	6063      	str	r3, [r4, #4]
 800b5a2:	bf04      	itt	eq
 800b5a4:	1949      	addeq	r1, r1, r5
 800b5a6:	6021      	streq	r1, [r4, #0]
 800b5a8:	6054      	str	r4, [r2, #4]
 800b5aa:	e7ca      	b.n	800b542 <_free_r+0x26>
 800b5ac:	b003      	add	sp, #12
 800b5ae:	bd30      	pop	{r4, r5, pc}
 800b5b0:	20000348 	.word	0x20000348

0800b5b4 <sbrk_aligned>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	4e0e      	ldr	r6, [pc, #56]	; (800b5f0 <sbrk_aligned+0x3c>)
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	6831      	ldr	r1, [r6, #0]
 800b5bc:	4605      	mov	r5, r0
 800b5be:	b911      	cbnz	r1, 800b5c6 <sbrk_aligned+0x12>
 800b5c0:	f000 fba6 	bl	800bd10 <_sbrk_r>
 800b5c4:	6030      	str	r0, [r6, #0]
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f000 fba1 	bl	800bd10 <_sbrk_r>
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	d00a      	beq.n	800b5e8 <sbrk_aligned+0x34>
 800b5d2:	1cc4      	adds	r4, r0, #3
 800b5d4:	f024 0403 	bic.w	r4, r4, #3
 800b5d8:	42a0      	cmp	r0, r4
 800b5da:	d007      	beq.n	800b5ec <sbrk_aligned+0x38>
 800b5dc:	1a21      	subs	r1, r4, r0
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f000 fb96 	bl	800bd10 <_sbrk_r>
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	d101      	bne.n	800b5ec <sbrk_aligned+0x38>
 800b5e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	2000034c 	.word	0x2000034c

0800b5f4 <_malloc_r>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	1ccd      	adds	r5, r1, #3
 800b5fa:	f025 0503 	bic.w	r5, r5, #3
 800b5fe:	3508      	adds	r5, #8
 800b600:	2d0c      	cmp	r5, #12
 800b602:	bf38      	it	cc
 800b604:	250c      	movcc	r5, #12
 800b606:	2d00      	cmp	r5, #0
 800b608:	4607      	mov	r7, r0
 800b60a:	db01      	blt.n	800b610 <_malloc_r+0x1c>
 800b60c:	42a9      	cmp	r1, r5
 800b60e:	d905      	bls.n	800b61c <_malloc_r+0x28>
 800b610:	230c      	movs	r3, #12
 800b612:	603b      	str	r3, [r7, #0]
 800b614:	2600      	movs	r6, #0
 800b616:	4630      	mov	r0, r6
 800b618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6f0 <_malloc_r+0xfc>
 800b620:	f000 f868 	bl	800b6f4 <__malloc_lock>
 800b624:	f8d8 3000 	ldr.w	r3, [r8]
 800b628:	461c      	mov	r4, r3
 800b62a:	bb5c      	cbnz	r4, 800b684 <_malloc_r+0x90>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4638      	mov	r0, r7
 800b630:	f7ff ffc0 	bl	800b5b4 <sbrk_aligned>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	4604      	mov	r4, r0
 800b638:	d155      	bne.n	800b6e6 <_malloc_r+0xf2>
 800b63a:	f8d8 4000 	ldr.w	r4, [r8]
 800b63e:	4626      	mov	r6, r4
 800b640:	2e00      	cmp	r6, #0
 800b642:	d145      	bne.n	800b6d0 <_malloc_r+0xdc>
 800b644:	2c00      	cmp	r4, #0
 800b646:	d048      	beq.n	800b6da <_malloc_r+0xe6>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	4631      	mov	r1, r6
 800b64c:	4638      	mov	r0, r7
 800b64e:	eb04 0903 	add.w	r9, r4, r3
 800b652:	f000 fb5d 	bl	800bd10 <_sbrk_r>
 800b656:	4581      	cmp	r9, r0
 800b658:	d13f      	bne.n	800b6da <_malloc_r+0xe6>
 800b65a:	6821      	ldr	r1, [r4, #0]
 800b65c:	1a6d      	subs	r5, r5, r1
 800b65e:	4629      	mov	r1, r5
 800b660:	4638      	mov	r0, r7
 800b662:	f7ff ffa7 	bl	800b5b4 <sbrk_aligned>
 800b666:	3001      	adds	r0, #1
 800b668:	d037      	beq.n	800b6da <_malloc_r+0xe6>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	442b      	add	r3, r5
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	f8d8 3000 	ldr.w	r3, [r8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d038      	beq.n	800b6ea <_malloc_r+0xf6>
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	42a2      	cmp	r2, r4
 800b67c:	d12b      	bne.n	800b6d6 <_malloc_r+0xe2>
 800b67e:	2200      	movs	r2, #0
 800b680:	605a      	str	r2, [r3, #4]
 800b682:	e00f      	b.n	800b6a4 <_malloc_r+0xb0>
 800b684:	6822      	ldr	r2, [r4, #0]
 800b686:	1b52      	subs	r2, r2, r5
 800b688:	d41f      	bmi.n	800b6ca <_malloc_r+0xd6>
 800b68a:	2a0b      	cmp	r2, #11
 800b68c:	d917      	bls.n	800b6be <_malloc_r+0xca>
 800b68e:	1961      	adds	r1, r4, r5
 800b690:	42a3      	cmp	r3, r4
 800b692:	6025      	str	r5, [r4, #0]
 800b694:	bf18      	it	ne
 800b696:	6059      	strne	r1, [r3, #4]
 800b698:	6863      	ldr	r3, [r4, #4]
 800b69a:	bf08      	it	eq
 800b69c:	f8c8 1000 	streq.w	r1, [r8]
 800b6a0:	5162      	str	r2, [r4, r5]
 800b6a2:	604b      	str	r3, [r1, #4]
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f104 060b 	add.w	r6, r4, #11
 800b6aa:	f000 f829 	bl	800b700 <__malloc_unlock>
 800b6ae:	f026 0607 	bic.w	r6, r6, #7
 800b6b2:	1d23      	adds	r3, r4, #4
 800b6b4:	1af2      	subs	r2, r6, r3
 800b6b6:	d0ae      	beq.n	800b616 <_malloc_r+0x22>
 800b6b8:	1b9b      	subs	r3, r3, r6
 800b6ba:	50a3      	str	r3, [r4, r2]
 800b6bc:	e7ab      	b.n	800b616 <_malloc_r+0x22>
 800b6be:	42a3      	cmp	r3, r4
 800b6c0:	6862      	ldr	r2, [r4, #4]
 800b6c2:	d1dd      	bne.n	800b680 <_malloc_r+0x8c>
 800b6c4:	f8c8 2000 	str.w	r2, [r8]
 800b6c8:	e7ec      	b.n	800b6a4 <_malloc_r+0xb0>
 800b6ca:	4623      	mov	r3, r4
 800b6cc:	6864      	ldr	r4, [r4, #4]
 800b6ce:	e7ac      	b.n	800b62a <_malloc_r+0x36>
 800b6d0:	4634      	mov	r4, r6
 800b6d2:	6876      	ldr	r6, [r6, #4]
 800b6d4:	e7b4      	b.n	800b640 <_malloc_r+0x4c>
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	e7cc      	b.n	800b674 <_malloc_r+0x80>
 800b6da:	230c      	movs	r3, #12
 800b6dc:	603b      	str	r3, [r7, #0]
 800b6de:	4638      	mov	r0, r7
 800b6e0:	f000 f80e 	bl	800b700 <__malloc_unlock>
 800b6e4:	e797      	b.n	800b616 <_malloc_r+0x22>
 800b6e6:	6025      	str	r5, [r4, #0]
 800b6e8:	e7dc      	b.n	800b6a4 <_malloc_r+0xb0>
 800b6ea:	605b      	str	r3, [r3, #4]
 800b6ec:	deff      	udf	#255	; 0xff
 800b6ee:	bf00      	nop
 800b6f0:	20000348 	.word	0x20000348

0800b6f4 <__malloc_lock>:
 800b6f4:	4801      	ldr	r0, [pc, #4]	; (800b6fc <__malloc_lock+0x8>)
 800b6f6:	f7ff bf0f 	b.w	800b518 <__retarget_lock_acquire_recursive>
 800b6fa:	bf00      	nop
 800b6fc:	20000344 	.word	0x20000344

0800b700 <__malloc_unlock>:
 800b700:	4801      	ldr	r0, [pc, #4]	; (800b708 <__malloc_unlock+0x8>)
 800b702:	f7ff bf0a 	b.w	800b51a <__retarget_lock_release_recursive>
 800b706:	bf00      	nop
 800b708:	20000344 	.word	0x20000344

0800b70c <__ssputs_r>:
 800b70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b710:	688e      	ldr	r6, [r1, #8]
 800b712:	461f      	mov	r7, r3
 800b714:	42be      	cmp	r6, r7
 800b716:	680b      	ldr	r3, [r1, #0]
 800b718:	4682      	mov	sl, r0
 800b71a:	460c      	mov	r4, r1
 800b71c:	4690      	mov	r8, r2
 800b71e:	d82c      	bhi.n	800b77a <__ssputs_r+0x6e>
 800b720:	898a      	ldrh	r2, [r1, #12]
 800b722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b726:	d026      	beq.n	800b776 <__ssputs_r+0x6a>
 800b728:	6965      	ldr	r5, [r4, #20]
 800b72a:	6909      	ldr	r1, [r1, #16]
 800b72c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b730:	eba3 0901 	sub.w	r9, r3, r1
 800b734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b738:	1c7b      	adds	r3, r7, #1
 800b73a:	444b      	add	r3, r9
 800b73c:	106d      	asrs	r5, r5, #1
 800b73e:	429d      	cmp	r5, r3
 800b740:	bf38      	it	cc
 800b742:	461d      	movcc	r5, r3
 800b744:	0553      	lsls	r3, r2, #21
 800b746:	d527      	bpl.n	800b798 <__ssputs_r+0x8c>
 800b748:	4629      	mov	r1, r5
 800b74a:	f7ff ff53 	bl	800b5f4 <_malloc_r>
 800b74e:	4606      	mov	r6, r0
 800b750:	b360      	cbz	r0, 800b7ac <__ssputs_r+0xa0>
 800b752:	6921      	ldr	r1, [r4, #16]
 800b754:	464a      	mov	r2, r9
 800b756:	f000 faeb 	bl	800bd30 <memcpy>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	6126      	str	r6, [r4, #16]
 800b768:	6165      	str	r5, [r4, #20]
 800b76a:	444e      	add	r6, r9
 800b76c:	eba5 0509 	sub.w	r5, r5, r9
 800b770:	6026      	str	r6, [r4, #0]
 800b772:	60a5      	str	r5, [r4, #8]
 800b774:	463e      	mov	r6, r7
 800b776:	42be      	cmp	r6, r7
 800b778:	d900      	bls.n	800b77c <__ssputs_r+0x70>
 800b77a:	463e      	mov	r6, r7
 800b77c:	6820      	ldr	r0, [r4, #0]
 800b77e:	4632      	mov	r2, r6
 800b780:	4641      	mov	r1, r8
 800b782:	f000 faab 	bl	800bcdc <memmove>
 800b786:	68a3      	ldr	r3, [r4, #8]
 800b788:	1b9b      	subs	r3, r3, r6
 800b78a:	60a3      	str	r3, [r4, #8]
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	4433      	add	r3, r6
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	2000      	movs	r0, #0
 800b794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b798:	462a      	mov	r2, r5
 800b79a:	f000 fad7 	bl	800bd4c <_realloc_r>
 800b79e:	4606      	mov	r6, r0
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d1e0      	bne.n	800b766 <__ssputs_r+0x5a>
 800b7a4:	6921      	ldr	r1, [r4, #16]
 800b7a6:	4650      	mov	r0, sl
 800b7a8:	f7ff feb8 	bl	800b51c <_free_r>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	f8ca 3000 	str.w	r3, [sl]
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b7be:	e7e9      	b.n	800b794 <__ssputs_r+0x88>

0800b7c0 <_svfiprintf_r>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	4698      	mov	r8, r3
 800b7c6:	898b      	ldrh	r3, [r1, #12]
 800b7c8:	061b      	lsls	r3, r3, #24
 800b7ca:	b09d      	sub	sp, #116	; 0x74
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	4614      	mov	r4, r2
 800b7d2:	d50e      	bpl.n	800b7f2 <_svfiprintf_r+0x32>
 800b7d4:	690b      	ldr	r3, [r1, #16]
 800b7d6:	b963      	cbnz	r3, 800b7f2 <_svfiprintf_r+0x32>
 800b7d8:	2140      	movs	r1, #64	; 0x40
 800b7da:	f7ff ff0b 	bl	800b5f4 <_malloc_r>
 800b7de:	6028      	str	r0, [r5, #0]
 800b7e0:	6128      	str	r0, [r5, #16]
 800b7e2:	b920      	cbnz	r0, 800b7ee <_svfiprintf_r+0x2e>
 800b7e4:	230c      	movs	r3, #12
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	e0d0      	b.n	800b990 <_svfiprintf_r+0x1d0>
 800b7ee:	2340      	movs	r3, #64	; 0x40
 800b7f0:	616b      	str	r3, [r5, #20]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f6:	2320      	movs	r3, #32
 800b7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b800:	2330      	movs	r3, #48	; 0x30
 800b802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b9a8 <_svfiprintf_r+0x1e8>
 800b806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b80a:	f04f 0901 	mov.w	r9, #1
 800b80e:	4623      	mov	r3, r4
 800b810:	469a      	mov	sl, r3
 800b812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b816:	b10a      	cbz	r2, 800b81c <_svfiprintf_r+0x5c>
 800b818:	2a25      	cmp	r2, #37	; 0x25
 800b81a:	d1f9      	bne.n	800b810 <_svfiprintf_r+0x50>
 800b81c:	ebba 0b04 	subs.w	fp, sl, r4
 800b820:	d00b      	beq.n	800b83a <_svfiprintf_r+0x7a>
 800b822:	465b      	mov	r3, fp
 800b824:	4622      	mov	r2, r4
 800b826:	4629      	mov	r1, r5
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff ff6f 	bl	800b70c <__ssputs_r>
 800b82e:	3001      	adds	r0, #1
 800b830:	f000 80a9 	beq.w	800b986 <_svfiprintf_r+0x1c6>
 800b834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b836:	445a      	add	r2, fp
 800b838:	9209      	str	r2, [sp, #36]	; 0x24
 800b83a:	f89a 3000 	ldrb.w	r3, [sl]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 80a1 	beq.w	800b986 <_svfiprintf_r+0x1c6>
 800b844:	2300      	movs	r3, #0
 800b846:	f04f 32ff 	mov.w	r2, #4294967295
 800b84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b84e:	f10a 0a01 	add.w	sl, sl, #1
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	9307      	str	r3, [sp, #28]
 800b856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b85a:	931a      	str	r3, [sp, #104]	; 0x68
 800b85c:	4654      	mov	r4, sl
 800b85e:	2205      	movs	r2, #5
 800b860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b864:	4850      	ldr	r0, [pc, #320]	; (800b9a8 <_svfiprintf_r+0x1e8>)
 800b866:	f7fc fcdb 	bl	8008220 <memchr>
 800b86a:	9a04      	ldr	r2, [sp, #16]
 800b86c:	b9d8      	cbnz	r0, 800b8a6 <_svfiprintf_r+0xe6>
 800b86e:	06d0      	lsls	r0, r2, #27
 800b870:	bf44      	itt	mi
 800b872:	2320      	movmi	r3, #32
 800b874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b878:	0711      	lsls	r1, r2, #28
 800b87a:	bf44      	itt	mi
 800b87c:	232b      	movmi	r3, #43	; 0x2b
 800b87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b882:	f89a 3000 	ldrb.w	r3, [sl]
 800b886:	2b2a      	cmp	r3, #42	; 0x2a
 800b888:	d015      	beq.n	800b8b6 <_svfiprintf_r+0xf6>
 800b88a:	9a07      	ldr	r2, [sp, #28]
 800b88c:	4654      	mov	r4, sl
 800b88e:	2000      	movs	r0, #0
 800b890:	f04f 0c0a 	mov.w	ip, #10
 800b894:	4621      	mov	r1, r4
 800b896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b89a:	3b30      	subs	r3, #48	; 0x30
 800b89c:	2b09      	cmp	r3, #9
 800b89e:	d94d      	bls.n	800b93c <_svfiprintf_r+0x17c>
 800b8a0:	b1b0      	cbz	r0, 800b8d0 <_svfiprintf_r+0x110>
 800b8a2:	9207      	str	r2, [sp, #28]
 800b8a4:	e014      	b.n	800b8d0 <_svfiprintf_r+0x110>
 800b8a6:	eba0 0308 	sub.w	r3, r0, r8
 800b8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	9304      	str	r3, [sp, #16]
 800b8b2:	46a2      	mov	sl, r4
 800b8b4:	e7d2      	b.n	800b85c <_svfiprintf_r+0x9c>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	1d19      	adds	r1, r3, #4
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	9103      	str	r1, [sp, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfbb      	ittet	lt
 800b8c2:	425b      	neglt	r3, r3
 800b8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8c8:	9307      	strge	r3, [sp, #28]
 800b8ca:	9307      	strlt	r3, [sp, #28]
 800b8cc:	bfb8      	it	lt
 800b8ce:	9204      	strlt	r2, [sp, #16]
 800b8d0:	7823      	ldrb	r3, [r4, #0]
 800b8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8d4:	d10c      	bne.n	800b8f0 <_svfiprintf_r+0x130>
 800b8d6:	7863      	ldrb	r3, [r4, #1]
 800b8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8da:	d134      	bne.n	800b946 <_svfiprintf_r+0x186>
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	9203      	str	r2, [sp, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfb8      	it	lt
 800b8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8ec:	3402      	adds	r4, #2
 800b8ee:	9305      	str	r3, [sp, #20]
 800b8f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b9b8 <_svfiprintf_r+0x1f8>
 800b8f4:	7821      	ldrb	r1, [r4, #0]
 800b8f6:	2203      	movs	r2, #3
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	f7fc fc91 	bl	8008220 <memchr>
 800b8fe:	b138      	cbz	r0, 800b910 <_svfiprintf_r+0x150>
 800b900:	9b04      	ldr	r3, [sp, #16]
 800b902:	eba0 000a 	sub.w	r0, r0, sl
 800b906:	2240      	movs	r2, #64	; 0x40
 800b908:	4082      	lsls	r2, r0
 800b90a:	4313      	orrs	r3, r2
 800b90c:	3401      	adds	r4, #1
 800b90e:	9304      	str	r3, [sp, #16]
 800b910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b914:	4825      	ldr	r0, [pc, #148]	; (800b9ac <_svfiprintf_r+0x1ec>)
 800b916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b91a:	2206      	movs	r2, #6
 800b91c:	f7fc fc80 	bl	8008220 <memchr>
 800b920:	2800      	cmp	r0, #0
 800b922:	d038      	beq.n	800b996 <_svfiprintf_r+0x1d6>
 800b924:	4b22      	ldr	r3, [pc, #136]	; (800b9b0 <_svfiprintf_r+0x1f0>)
 800b926:	bb1b      	cbnz	r3, 800b970 <_svfiprintf_r+0x1b0>
 800b928:	9b03      	ldr	r3, [sp, #12]
 800b92a:	3307      	adds	r3, #7
 800b92c:	f023 0307 	bic.w	r3, r3, #7
 800b930:	3308      	adds	r3, #8
 800b932:	9303      	str	r3, [sp, #12]
 800b934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b936:	4433      	add	r3, r6
 800b938:	9309      	str	r3, [sp, #36]	; 0x24
 800b93a:	e768      	b.n	800b80e <_svfiprintf_r+0x4e>
 800b93c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b940:	460c      	mov	r4, r1
 800b942:	2001      	movs	r0, #1
 800b944:	e7a6      	b.n	800b894 <_svfiprintf_r+0xd4>
 800b946:	2300      	movs	r3, #0
 800b948:	3401      	adds	r4, #1
 800b94a:	9305      	str	r3, [sp, #20]
 800b94c:	4619      	mov	r1, r3
 800b94e:	f04f 0c0a 	mov.w	ip, #10
 800b952:	4620      	mov	r0, r4
 800b954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b958:	3a30      	subs	r2, #48	; 0x30
 800b95a:	2a09      	cmp	r2, #9
 800b95c:	d903      	bls.n	800b966 <_svfiprintf_r+0x1a6>
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0c6      	beq.n	800b8f0 <_svfiprintf_r+0x130>
 800b962:	9105      	str	r1, [sp, #20]
 800b964:	e7c4      	b.n	800b8f0 <_svfiprintf_r+0x130>
 800b966:	fb0c 2101 	mla	r1, ip, r1, r2
 800b96a:	4604      	mov	r4, r0
 800b96c:	2301      	movs	r3, #1
 800b96e:	e7f0      	b.n	800b952 <_svfiprintf_r+0x192>
 800b970:	ab03      	add	r3, sp, #12
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	462a      	mov	r2, r5
 800b976:	4b0f      	ldr	r3, [pc, #60]	; (800b9b4 <_svfiprintf_r+0x1f4>)
 800b978:	a904      	add	r1, sp, #16
 800b97a:	4638      	mov	r0, r7
 800b97c:	f3af 8000 	nop.w
 800b980:	1c42      	adds	r2, r0, #1
 800b982:	4606      	mov	r6, r0
 800b984:	d1d6      	bne.n	800b934 <_svfiprintf_r+0x174>
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	065b      	lsls	r3, r3, #25
 800b98a:	f53f af2d 	bmi.w	800b7e8 <_svfiprintf_r+0x28>
 800b98e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b990:	b01d      	add	sp, #116	; 0x74
 800b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b996:	ab03      	add	r3, sp, #12
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	462a      	mov	r2, r5
 800b99c:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <_svfiprintf_r+0x1f4>)
 800b99e:	a904      	add	r1, sp, #16
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f000 f879 	bl	800ba98 <_printf_i>
 800b9a6:	e7eb      	b.n	800b980 <_svfiprintf_r+0x1c0>
 800b9a8:	0800c168 	.word	0x0800c168
 800b9ac:	0800c172 	.word	0x0800c172
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	0800b70d 	.word	0x0800b70d
 800b9b8:	0800c16e 	.word	0x0800c16e

0800b9bc <_printf_common>:
 800b9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c0:	4616      	mov	r6, r2
 800b9c2:	4699      	mov	r9, r3
 800b9c4:	688a      	ldr	r2, [r1, #8]
 800b9c6:	690b      	ldr	r3, [r1, #16]
 800b9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	bfb8      	it	lt
 800b9d0:	4613      	movlt	r3, r2
 800b9d2:	6033      	str	r3, [r6, #0]
 800b9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9d8:	4607      	mov	r7, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	b10a      	cbz	r2, 800b9e2 <_printf_common+0x26>
 800b9de:	3301      	adds	r3, #1
 800b9e0:	6033      	str	r3, [r6, #0]
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	0699      	lsls	r1, r3, #26
 800b9e6:	bf42      	ittt	mi
 800b9e8:	6833      	ldrmi	r3, [r6, #0]
 800b9ea:	3302      	addmi	r3, #2
 800b9ec:	6033      	strmi	r3, [r6, #0]
 800b9ee:	6825      	ldr	r5, [r4, #0]
 800b9f0:	f015 0506 	ands.w	r5, r5, #6
 800b9f4:	d106      	bne.n	800ba04 <_printf_common+0x48>
 800b9f6:	f104 0a19 	add.w	sl, r4, #25
 800b9fa:	68e3      	ldr	r3, [r4, #12]
 800b9fc:	6832      	ldr	r2, [r6, #0]
 800b9fe:	1a9b      	subs	r3, r3, r2
 800ba00:	42ab      	cmp	r3, r5
 800ba02:	dc26      	bgt.n	800ba52 <_printf_common+0x96>
 800ba04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba08:	1e13      	subs	r3, r2, #0
 800ba0a:	6822      	ldr	r2, [r4, #0]
 800ba0c:	bf18      	it	ne
 800ba0e:	2301      	movne	r3, #1
 800ba10:	0692      	lsls	r2, r2, #26
 800ba12:	d42b      	bmi.n	800ba6c <_printf_common+0xb0>
 800ba14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba18:	4649      	mov	r1, r9
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	47c0      	blx	r8
 800ba1e:	3001      	adds	r0, #1
 800ba20:	d01e      	beq.n	800ba60 <_printf_common+0xa4>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	6922      	ldr	r2, [r4, #16]
 800ba26:	f003 0306 	and.w	r3, r3, #6
 800ba2a:	2b04      	cmp	r3, #4
 800ba2c:	bf02      	ittt	eq
 800ba2e:	68e5      	ldreq	r5, [r4, #12]
 800ba30:	6833      	ldreq	r3, [r6, #0]
 800ba32:	1aed      	subeq	r5, r5, r3
 800ba34:	68a3      	ldr	r3, [r4, #8]
 800ba36:	bf0c      	ite	eq
 800ba38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba3c:	2500      	movne	r5, #0
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	bfc4      	itt	gt
 800ba42:	1a9b      	subgt	r3, r3, r2
 800ba44:	18ed      	addgt	r5, r5, r3
 800ba46:	2600      	movs	r6, #0
 800ba48:	341a      	adds	r4, #26
 800ba4a:	42b5      	cmp	r5, r6
 800ba4c:	d11a      	bne.n	800ba84 <_printf_common+0xc8>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	e008      	b.n	800ba64 <_printf_common+0xa8>
 800ba52:	2301      	movs	r3, #1
 800ba54:	4652      	mov	r2, sl
 800ba56:	4649      	mov	r1, r9
 800ba58:	4638      	mov	r0, r7
 800ba5a:	47c0      	blx	r8
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d103      	bne.n	800ba68 <_printf_common+0xac>
 800ba60:	f04f 30ff 	mov.w	r0, #4294967295
 800ba64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba68:	3501      	adds	r5, #1
 800ba6a:	e7c6      	b.n	800b9fa <_printf_common+0x3e>
 800ba6c:	18e1      	adds	r1, r4, r3
 800ba6e:	1c5a      	adds	r2, r3, #1
 800ba70:	2030      	movs	r0, #48	; 0x30
 800ba72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba76:	4422      	add	r2, r4
 800ba78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba80:	3302      	adds	r3, #2
 800ba82:	e7c7      	b.n	800ba14 <_printf_common+0x58>
 800ba84:	2301      	movs	r3, #1
 800ba86:	4622      	mov	r2, r4
 800ba88:	4649      	mov	r1, r9
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	47c0      	blx	r8
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d0e6      	beq.n	800ba60 <_printf_common+0xa4>
 800ba92:	3601      	adds	r6, #1
 800ba94:	e7d9      	b.n	800ba4a <_printf_common+0x8e>
	...

0800ba98 <_printf_i>:
 800ba98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9c:	7e0f      	ldrb	r7, [r1, #24]
 800ba9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800baa0:	2f78      	cmp	r7, #120	; 0x78
 800baa2:	4691      	mov	r9, r2
 800baa4:	4680      	mov	r8, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	469a      	mov	sl, r3
 800baaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baae:	d807      	bhi.n	800bac0 <_printf_i+0x28>
 800bab0:	2f62      	cmp	r7, #98	; 0x62
 800bab2:	d80a      	bhi.n	800baca <_printf_i+0x32>
 800bab4:	2f00      	cmp	r7, #0
 800bab6:	f000 80d4 	beq.w	800bc62 <_printf_i+0x1ca>
 800baba:	2f58      	cmp	r7, #88	; 0x58
 800babc:	f000 80c0 	beq.w	800bc40 <_printf_i+0x1a8>
 800bac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bac8:	e03a      	b.n	800bb40 <_printf_i+0xa8>
 800baca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bace:	2b15      	cmp	r3, #21
 800bad0:	d8f6      	bhi.n	800bac0 <_printf_i+0x28>
 800bad2:	a101      	add	r1, pc, #4	; (adr r1, 800bad8 <_printf_i+0x40>)
 800bad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bad8:	0800bb31 	.word	0x0800bb31
 800badc:	0800bb45 	.word	0x0800bb45
 800bae0:	0800bac1 	.word	0x0800bac1
 800bae4:	0800bac1 	.word	0x0800bac1
 800bae8:	0800bac1 	.word	0x0800bac1
 800baec:	0800bac1 	.word	0x0800bac1
 800baf0:	0800bb45 	.word	0x0800bb45
 800baf4:	0800bac1 	.word	0x0800bac1
 800baf8:	0800bac1 	.word	0x0800bac1
 800bafc:	0800bac1 	.word	0x0800bac1
 800bb00:	0800bac1 	.word	0x0800bac1
 800bb04:	0800bc49 	.word	0x0800bc49
 800bb08:	0800bb71 	.word	0x0800bb71
 800bb0c:	0800bc03 	.word	0x0800bc03
 800bb10:	0800bac1 	.word	0x0800bac1
 800bb14:	0800bac1 	.word	0x0800bac1
 800bb18:	0800bc6b 	.word	0x0800bc6b
 800bb1c:	0800bac1 	.word	0x0800bac1
 800bb20:	0800bb71 	.word	0x0800bb71
 800bb24:	0800bac1 	.word	0x0800bac1
 800bb28:	0800bac1 	.word	0x0800bac1
 800bb2c:	0800bc0b 	.word	0x0800bc0b
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	1d1a      	adds	r2, r3, #4
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	602a      	str	r2, [r5, #0]
 800bb38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb40:	2301      	movs	r3, #1
 800bb42:	e09f      	b.n	800bc84 <_printf_i+0x1ec>
 800bb44:	6820      	ldr	r0, [r4, #0]
 800bb46:	682b      	ldr	r3, [r5, #0]
 800bb48:	0607      	lsls	r7, r0, #24
 800bb4a:	f103 0104 	add.w	r1, r3, #4
 800bb4e:	6029      	str	r1, [r5, #0]
 800bb50:	d501      	bpl.n	800bb56 <_printf_i+0xbe>
 800bb52:	681e      	ldr	r6, [r3, #0]
 800bb54:	e003      	b.n	800bb5e <_printf_i+0xc6>
 800bb56:	0646      	lsls	r6, r0, #25
 800bb58:	d5fb      	bpl.n	800bb52 <_printf_i+0xba>
 800bb5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb5e:	2e00      	cmp	r6, #0
 800bb60:	da03      	bge.n	800bb6a <_printf_i+0xd2>
 800bb62:	232d      	movs	r3, #45	; 0x2d
 800bb64:	4276      	negs	r6, r6
 800bb66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb6a:	485a      	ldr	r0, [pc, #360]	; (800bcd4 <_printf_i+0x23c>)
 800bb6c:	230a      	movs	r3, #10
 800bb6e:	e012      	b.n	800bb96 <_printf_i+0xfe>
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	1d19      	adds	r1, r3, #4
 800bb76:	6029      	str	r1, [r5, #0]
 800bb78:	0605      	lsls	r5, r0, #24
 800bb7a:	d501      	bpl.n	800bb80 <_printf_i+0xe8>
 800bb7c:	681e      	ldr	r6, [r3, #0]
 800bb7e:	e002      	b.n	800bb86 <_printf_i+0xee>
 800bb80:	0641      	lsls	r1, r0, #25
 800bb82:	d5fb      	bpl.n	800bb7c <_printf_i+0xe4>
 800bb84:	881e      	ldrh	r6, [r3, #0]
 800bb86:	4853      	ldr	r0, [pc, #332]	; (800bcd4 <_printf_i+0x23c>)
 800bb88:	2f6f      	cmp	r7, #111	; 0x6f
 800bb8a:	bf0c      	ite	eq
 800bb8c:	2308      	moveq	r3, #8
 800bb8e:	230a      	movne	r3, #10
 800bb90:	2100      	movs	r1, #0
 800bb92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb96:	6865      	ldr	r5, [r4, #4]
 800bb98:	60a5      	str	r5, [r4, #8]
 800bb9a:	2d00      	cmp	r5, #0
 800bb9c:	bfa2      	ittt	ge
 800bb9e:	6821      	ldrge	r1, [r4, #0]
 800bba0:	f021 0104 	bicge.w	r1, r1, #4
 800bba4:	6021      	strge	r1, [r4, #0]
 800bba6:	b90e      	cbnz	r6, 800bbac <_printf_i+0x114>
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	d04b      	beq.n	800bc44 <_printf_i+0x1ac>
 800bbac:	4615      	mov	r5, r2
 800bbae:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbb2:	fb03 6711 	mls	r7, r3, r1, r6
 800bbb6:	5dc7      	ldrb	r7, [r0, r7]
 800bbb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbbc:	4637      	mov	r7, r6
 800bbbe:	42bb      	cmp	r3, r7
 800bbc0:	460e      	mov	r6, r1
 800bbc2:	d9f4      	bls.n	800bbae <_printf_i+0x116>
 800bbc4:	2b08      	cmp	r3, #8
 800bbc6:	d10b      	bne.n	800bbe0 <_printf_i+0x148>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	07de      	lsls	r6, r3, #31
 800bbcc:	d508      	bpl.n	800bbe0 <_printf_i+0x148>
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	6861      	ldr	r1, [r4, #4]
 800bbd2:	4299      	cmp	r1, r3
 800bbd4:	bfde      	ittt	le
 800bbd6:	2330      	movle	r3, #48	; 0x30
 800bbd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bbe0:	1b52      	subs	r2, r2, r5
 800bbe2:	6122      	str	r2, [r4, #16]
 800bbe4:	f8cd a000 	str.w	sl, [sp]
 800bbe8:	464b      	mov	r3, r9
 800bbea:	aa03      	add	r2, sp, #12
 800bbec:	4621      	mov	r1, r4
 800bbee:	4640      	mov	r0, r8
 800bbf0:	f7ff fee4 	bl	800b9bc <_printf_common>
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	d14a      	bne.n	800bc8e <_printf_i+0x1f6>
 800bbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfc:	b004      	add	sp, #16
 800bbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	f043 0320 	orr.w	r3, r3, #32
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	4833      	ldr	r0, [pc, #204]	; (800bcd8 <_printf_i+0x240>)
 800bc0c:	2778      	movs	r7, #120	; 0x78
 800bc0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc12:	6823      	ldr	r3, [r4, #0]
 800bc14:	6829      	ldr	r1, [r5, #0]
 800bc16:	061f      	lsls	r7, r3, #24
 800bc18:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc1c:	d402      	bmi.n	800bc24 <_printf_i+0x18c>
 800bc1e:	065f      	lsls	r7, r3, #25
 800bc20:	bf48      	it	mi
 800bc22:	b2b6      	uxthmi	r6, r6
 800bc24:	07df      	lsls	r7, r3, #31
 800bc26:	bf48      	it	mi
 800bc28:	f043 0320 	orrmi.w	r3, r3, #32
 800bc2c:	6029      	str	r1, [r5, #0]
 800bc2e:	bf48      	it	mi
 800bc30:	6023      	strmi	r3, [r4, #0]
 800bc32:	b91e      	cbnz	r6, 800bc3c <_printf_i+0x1a4>
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	f023 0320 	bic.w	r3, r3, #32
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	2310      	movs	r3, #16
 800bc3e:	e7a7      	b.n	800bb90 <_printf_i+0xf8>
 800bc40:	4824      	ldr	r0, [pc, #144]	; (800bcd4 <_printf_i+0x23c>)
 800bc42:	e7e4      	b.n	800bc0e <_printf_i+0x176>
 800bc44:	4615      	mov	r5, r2
 800bc46:	e7bd      	b.n	800bbc4 <_printf_i+0x12c>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	6826      	ldr	r6, [r4, #0]
 800bc4c:	6961      	ldr	r1, [r4, #20]
 800bc4e:	1d18      	adds	r0, r3, #4
 800bc50:	6028      	str	r0, [r5, #0]
 800bc52:	0635      	lsls	r5, r6, #24
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	d501      	bpl.n	800bc5c <_printf_i+0x1c4>
 800bc58:	6019      	str	r1, [r3, #0]
 800bc5a:	e002      	b.n	800bc62 <_printf_i+0x1ca>
 800bc5c:	0670      	lsls	r0, r6, #25
 800bc5e:	d5fb      	bpl.n	800bc58 <_printf_i+0x1c0>
 800bc60:	8019      	strh	r1, [r3, #0]
 800bc62:	2300      	movs	r3, #0
 800bc64:	6123      	str	r3, [r4, #16]
 800bc66:	4615      	mov	r5, r2
 800bc68:	e7bc      	b.n	800bbe4 <_printf_i+0x14c>
 800bc6a:	682b      	ldr	r3, [r5, #0]
 800bc6c:	1d1a      	adds	r2, r3, #4
 800bc6e:	602a      	str	r2, [r5, #0]
 800bc70:	681d      	ldr	r5, [r3, #0]
 800bc72:	6862      	ldr	r2, [r4, #4]
 800bc74:	2100      	movs	r1, #0
 800bc76:	4628      	mov	r0, r5
 800bc78:	f7fc fad2 	bl	8008220 <memchr>
 800bc7c:	b108      	cbz	r0, 800bc82 <_printf_i+0x1ea>
 800bc7e:	1b40      	subs	r0, r0, r5
 800bc80:	6060      	str	r0, [r4, #4]
 800bc82:	6863      	ldr	r3, [r4, #4]
 800bc84:	6123      	str	r3, [r4, #16]
 800bc86:	2300      	movs	r3, #0
 800bc88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc8c:	e7aa      	b.n	800bbe4 <_printf_i+0x14c>
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	462a      	mov	r2, r5
 800bc92:	4649      	mov	r1, r9
 800bc94:	4640      	mov	r0, r8
 800bc96:	47d0      	blx	sl
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d0ad      	beq.n	800bbf8 <_printf_i+0x160>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	079b      	lsls	r3, r3, #30
 800bca0:	d413      	bmi.n	800bcca <_printf_i+0x232>
 800bca2:	68e0      	ldr	r0, [r4, #12]
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	4298      	cmp	r0, r3
 800bca8:	bfb8      	it	lt
 800bcaa:	4618      	movlt	r0, r3
 800bcac:	e7a6      	b.n	800bbfc <_printf_i+0x164>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	4632      	mov	r2, r6
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	47d0      	blx	sl
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d09d      	beq.n	800bbf8 <_printf_i+0x160>
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	68e3      	ldr	r3, [r4, #12]
 800bcc0:	9903      	ldr	r1, [sp, #12]
 800bcc2:	1a5b      	subs	r3, r3, r1
 800bcc4:	42ab      	cmp	r3, r5
 800bcc6:	dcf2      	bgt.n	800bcae <_printf_i+0x216>
 800bcc8:	e7eb      	b.n	800bca2 <_printf_i+0x20a>
 800bcca:	2500      	movs	r5, #0
 800bccc:	f104 0619 	add.w	r6, r4, #25
 800bcd0:	e7f5      	b.n	800bcbe <_printf_i+0x226>
 800bcd2:	bf00      	nop
 800bcd4:	0800c179 	.word	0x0800c179
 800bcd8:	0800c18a 	.word	0x0800c18a

0800bcdc <memmove>:
 800bcdc:	4288      	cmp	r0, r1
 800bcde:	b510      	push	{r4, lr}
 800bce0:	eb01 0402 	add.w	r4, r1, r2
 800bce4:	d902      	bls.n	800bcec <memmove+0x10>
 800bce6:	4284      	cmp	r4, r0
 800bce8:	4623      	mov	r3, r4
 800bcea:	d807      	bhi.n	800bcfc <memmove+0x20>
 800bcec:	1e43      	subs	r3, r0, #1
 800bcee:	42a1      	cmp	r1, r4
 800bcf0:	d008      	beq.n	800bd04 <memmove+0x28>
 800bcf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcfa:	e7f8      	b.n	800bcee <memmove+0x12>
 800bcfc:	4402      	add	r2, r0
 800bcfe:	4601      	mov	r1, r0
 800bd00:	428a      	cmp	r2, r1
 800bd02:	d100      	bne.n	800bd06 <memmove+0x2a>
 800bd04:	bd10      	pop	{r4, pc}
 800bd06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd0e:	e7f7      	b.n	800bd00 <memmove+0x24>

0800bd10 <_sbrk_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d06      	ldr	r5, [pc, #24]	; (800bd2c <_sbrk_r+0x1c>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7fd fa62 	bl	80091e4 <_sbrk>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_sbrk_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_sbrk_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20000340 	.word	0x20000340

0800bd30 <memcpy>:
 800bd30:	440a      	add	r2, r1
 800bd32:	4291      	cmp	r1, r2
 800bd34:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd38:	d100      	bne.n	800bd3c <memcpy+0xc>
 800bd3a:	4770      	bx	lr
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd46:	4291      	cmp	r1, r2
 800bd48:	d1f9      	bne.n	800bd3e <memcpy+0xe>
 800bd4a:	bd10      	pop	{r4, pc}

0800bd4c <_realloc_r>:
 800bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd50:	4680      	mov	r8, r0
 800bd52:	4614      	mov	r4, r2
 800bd54:	460e      	mov	r6, r1
 800bd56:	b921      	cbnz	r1, 800bd62 <_realloc_r+0x16>
 800bd58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	f7ff bc49 	b.w	800b5f4 <_malloc_r>
 800bd62:	b92a      	cbnz	r2, 800bd70 <_realloc_r+0x24>
 800bd64:	f7ff fbda 	bl	800b51c <_free_r>
 800bd68:	4625      	mov	r5, r4
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd70:	f000 f81b 	bl	800bdaa <_malloc_usable_size_r>
 800bd74:	4284      	cmp	r4, r0
 800bd76:	4607      	mov	r7, r0
 800bd78:	d802      	bhi.n	800bd80 <_realloc_r+0x34>
 800bd7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd7e:	d812      	bhi.n	800bda6 <_realloc_r+0x5a>
 800bd80:	4621      	mov	r1, r4
 800bd82:	4640      	mov	r0, r8
 800bd84:	f7ff fc36 	bl	800b5f4 <_malloc_r>
 800bd88:	4605      	mov	r5, r0
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d0ed      	beq.n	800bd6a <_realloc_r+0x1e>
 800bd8e:	42bc      	cmp	r4, r7
 800bd90:	4622      	mov	r2, r4
 800bd92:	4631      	mov	r1, r6
 800bd94:	bf28      	it	cs
 800bd96:	463a      	movcs	r2, r7
 800bd98:	f7ff ffca 	bl	800bd30 <memcpy>
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	4640      	mov	r0, r8
 800bda0:	f7ff fbbc 	bl	800b51c <_free_r>
 800bda4:	e7e1      	b.n	800bd6a <_realloc_r+0x1e>
 800bda6:	4635      	mov	r5, r6
 800bda8:	e7df      	b.n	800bd6a <_realloc_r+0x1e>

0800bdaa <_malloc_usable_size_r>:
 800bdaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdae:	1f18      	subs	r0, r3, #4
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	bfbc      	itt	lt
 800bdb4:	580b      	ldrlt	r3, [r1, r0]
 800bdb6:	18c0      	addlt	r0, r0, r3
 800bdb8:	4770      	bx	lr
	...

0800bdbc <_init>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	bf00      	nop
 800bdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc2:	bc08      	pop	{r3}
 800bdc4:	469e      	mov	lr, r3
 800bdc6:	4770      	bx	lr

0800bdc8 <_fini>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	bf00      	nop
 800bdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdce:	bc08      	pop	{r3}
 800bdd0:	469e      	mov	lr, r3
 800bdd2:	4770      	bx	lr
